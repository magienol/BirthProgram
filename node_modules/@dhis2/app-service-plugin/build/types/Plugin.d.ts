import { ReactEventHandler } from 'react';
type PluginProps = {
    /** URL to provide to iframe `src` */
    pluginSource?: string;
    /**
     * Short name of the target app/plugin to load -- its plugin launch URL
     * will be found from the instance's app list (`/api/apps`)
     */
    pluginShortName?: string;
    /**
     * A defined height to used for the iframe. By default, the iframe will
     * resize to its content's height
     */
    height?: string | number;
    /**
     * A defined width to use on the iframe. By default, `100%` is used to
     * approximate the styles of a normal block element
     */
    width?: string | number;
    /**
     * Styles can be applied with className. Sizing styles will take precedence
     * over `width` and `height` props.
     *
     * **Note:** If using default width and you want to add margins, you will
     * probably want to wrap this `Plugin` in a `div` with the margin styles
     * instead to achieve the `width: auto` behavior of a normal block element
     */
    className?: string;
    /**
     * Set this if you want the width of the iframe to be driven by the
     * contents inside the plugin.
     *
     * The value provided here will be used as the `width` of a `div` wrapping
     * the plugin contents, which will be watched with a resize observer to
     * update the size of the iframe according to the plugin content width.
     *
     * Therefore, **`'max-content'`** is probably the value you want to use.
     * `'fit-content'` or `'min-content'` may also work, depending on your use
     * case.
     */
    clientWidth?: string | number;
    /** Props that will be sent to the plugin */
    propsToPassNonMemoized?: any;
    /** Event callback that will be called during the iframe's Load event */
    onLoad?: ReactEventHandler<HTMLIFrameElement>;
};
export declare const Plugin: ({ pluginSource, pluginShortName, onLoad, height, width, className, clientWidth, ...propsToPassNonMemoized }: PluginProps) => JSX.Element;
export {};
