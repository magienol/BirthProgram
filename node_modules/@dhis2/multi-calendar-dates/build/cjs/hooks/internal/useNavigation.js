"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNavigation = void 0;
var _polyfill = require("@js-temporal/polyfill");
var _react = require("react");
var _helpers = require("../../utils/helpers");
var _localisationHelpers = _interopRequireDefault(require("../../utils/localisationHelpers"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * internal hook used by useDatePicker to build the navigation of the calendar
 *
 * @param options
 * @returns
 */
const useNavigation = (firstZdtOfVisibleMonth, setFirstZdtOfVisibleMonth, localeOptions) => {
  return (0, _react.useMemo)(() => {
    var _firstZdtOfVisibleMon, _options$locale;
    const prevYear = firstZdtOfVisibleMonth.subtract({
      years: 1
    });
    const nextYear = firstZdtOfVisibleMonth.add({
      years: 1
    });

    // Setting the day to the 14th is guaranteed to get the next month correctly
    // according to our defintion, which considers adding one month to be the equivalent
    // of adding 1 to the current month, while Temporal does the arithmetic in iso8601
    // then converts to the custom calendar, which could end up in the same month.
    // (for example in Nepali where current date + 30 can end up in the same month for a month that has 32 days)
    // todo: clarify the expected behaviour with the Temporal team
    const prevMonth = firstZdtOfVisibleMonth.with({
      day: 14
    }).subtract({
      months: 1
    });
    const nextMonth = firstZdtOfVisibleMonth.with({
      day: 14
    }).add({
      months: 1
    });
    const options = {
      locale: localeOptions.locale,
      calendar: localeOptions.calendar.id,
      numberingSystem: localeOptions.numberingSystem
    };
    const yearNumericFormat = {
      ...options,
      year: 'numeric'
    };
    const getYearOptions = function (currentYear) {
      let pastOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (!currentYear) {
        return [];
      }
      const currentYearValue = parseInt(String(currentYear));
      if (isNaN(currentYearValue)) {
        return [];
      }
      const years = [];
      let startYear, endYear;
      if (options.calendar === 'nepali') {
        startYear = Math.max(1971, currentYearValue - (pastOnly ? 125 : 100));
        endYear = Math.min(2100, pastOnly ? currentYearValue : currentYearValue + 25);
      } else {
        startYear = currentYearValue - (pastOnly ? 125 : 100);
        endYear = pastOnly ? currentYearValue : currentYearValue + 25;
      }
      for (let year = startYear; year <= endYear; year++) {
        const yearDate = firstZdtOfVisibleMonth.with({
          year,
          month: 1,
          day: 1
        });
        years.push({
          label: _localisationHelpers.default.localiseYear(yearDate, {
            ...localeOptions,
            calendar: options.calendar
          }, yearNumericFormat).toString(),
          value: year
        });
      }
      return years;
    };
    const currentYearValue =
    // Ethiopic years - when localised to English - add the era (i.e. 2015 ERA1)
    options.calendar === 'ethiopic' ? (_firstZdtOfVisibleMon = firstZdtOfVisibleMonth.eraYear) !== null && _firstZdtOfVisibleMon !== void 0 ? _firstZdtOfVisibleMon : String(_localisationHelpers.default.localiseYear(firstZdtOfVisibleMonth, {
      ...localeOptions,
      calendar: options.calendar
    }, yearNumericFormat)).split(' ')[0] : firstZdtOfVisibleMonth.year;
    const years = getYearOptions(currentYearValue, localeOptions.pastOnly);
    const monthFormat = {
      ...options,
      month: 'long'
    };
    const isCustom = (0, _helpers.isCustomCalendar)(options.calendar);
    const months = !isCustom && (_options$locale = options.locale) !== null && _options$locale !== void 0 && _options$locale.toLowerCase().startsWith('en') ? (0, _helpers.getMonthsForCalendar)(options.calendar) : (0, _helpers.getMonthsForCalendar)(isCustom ? 'gregory' : options.calendar).map(month => {
      const calendar = new _polyfill.Temporal.Calendar(isCustom ? 'gregory' : options.calendar);
      const referenceDate = calendar.dateFromFields({
        year: 2000,
        month: 1,
        day: 1
      });
      const date = calendar.dateFromFields({
        year: referenceDate.year,
        month: month.value,
        day: 1
      });
      return {
        value: month.value,
        label: _localisationHelpers.default.localiseMonth(date, {
          ...localeOptions,
          calendar: options.calendar
        }, monthFormat) || month.label
      };
    });
    const navigateToMonth = monthNum => {
      try {
        setFirstZdtOfVisibleMonth(firstZdtOfVisibleMonth.with({
          month: monthNum,
          day: 1
        }));
      } catch (e) {
        console.error('Invalid month navigation:', e);
      }
    };
    const navigateToYear = year => {
      try {
        setFirstZdtOfVisibleMonth(firstZdtOfVisibleMonth.with({
          year
        }));
      } catch (e) {
        console.error('Invalid year navigation:', e);
      }
    };
    return {
      prevYear: {
        label: _localisationHelpers.default.localiseYear(prevYear, {
          ...localeOptions,
          calendar: options.calendar
        }, yearNumericFormat),
        navigateTo: () => setFirstZdtOfVisibleMonth(prevYear)
      },
      currYear: {
        label: _localisationHelpers.default.localiseYear(firstZdtOfVisibleMonth, {
          ...localeOptions,
          calendar: options.calendar
        }, yearNumericFormat),
        value: currentYearValue
      },
      nextYear: {
        label: _localisationHelpers.default.localiseYear(nextYear, {
          ...localeOptions,
          calendar: options.calendar
        }, yearNumericFormat),
        navigateTo: () => setFirstZdtOfVisibleMonth(nextYear)
      },
      prevMonth: {
        label: _localisationHelpers.default.localiseMonth(prevMonth, {
          ...localeOptions,
          calendar: options.calendar
        }, monthFormat),
        navigateTo: () => setFirstZdtOfVisibleMonth(prevMonth)
      },
      currMonth: {
        label: _localisationHelpers.default.localiseMonth(firstZdtOfVisibleMonth, {
          ...localeOptions,
          calendar: options.calendar
        }, monthFormat)
      },
      nextMonth: {
        label: _localisationHelpers.default.localiseMonth(nextMonth, {
          ...localeOptions,
          calendar: options.calendar
        }, monthFormat),
        navigateTo: () => setFirstZdtOfVisibleMonth(nextMonth)
      },
      months,
      years,
      navigateToMonth,
      navigateToYear
    };
  }, [firstZdtOfVisibleMonth, localeOptions, setFirstZdtOfVisibleMonth]);
};
exports.useNavigation = useNavigation;