import type { SupportedCalendar } from '../types';
declare type ValidationOptions = {
    calendar?: SupportedCalendar;
    minDateString?: string;
    maxDateString?: string;
    strictValidation?: boolean;
    format?: 'YYYY-MM-DD' | 'DD-MM-YYYY';
};
export declare enum DateValidationResult {
    INVALID_DATE_IN_CALENDAR = "INVALID_DATE_IN_CALENDAR",
    WRONG_FORMAT = "WRONG_FORMAT",
    LESS_THAN_MIN = "LESS_THAN_MIN",
    MORE_THAN_MAX = "INVALID_DATE_MORE_THAN_MAX"
}
declare type ValidationResult = {
    valid: boolean;
    error: boolean;
    warning?: never;
    validationText: string;
    validationCode: DateValidationResult;
} | {
    valid: boolean;
    warning: boolean;
    error?: never;
    validationText: string;
    validationCode: DateValidationResult;
} | {
    valid: true;
    error: false;
    warning: false;
    validationText: undefined;
    validationCode: undefined;
};
declare type ValidateDateStringFn = (dateString: string, options?: ValidationOptions) => ValidationResult;
export declare const validateDateString: ValidateDateStringFn;
export {};
