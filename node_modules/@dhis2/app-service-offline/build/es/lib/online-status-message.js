import React, { useContext, useState } from 'react';
// 'get' and 'set' contexts are separated so 'setter' consumers that don't
// actually need the value don't have to rerender when the value changes:
const OnlineStatusMessageValueContext = /*#__PURE__*/React.createContext(undefined);
const SetOnlineStatusMessageContext = /*#__PURE__*/React.createContext(() => undefined);
export const OnlineStatusMessageProvider = _ref => {
  let {
    children
  } = _ref;
  const [onlineStatusMessage, setOnlineStatusMessage] = useState(); // note: not undefined

  return /*#__PURE__*/React.createElement(OnlineStatusMessageValueContext.Provider, {
    value: onlineStatusMessage
  }, /*#__PURE__*/React.createElement(SetOnlineStatusMessageContext.Provider, {
    value: setOnlineStatusMessage
  }, children));
};
export const useOnlineStatusMessageValue = () => {
  return useContext(OnlineStatusMessageValueContext);
};
export const useSetOnlineStatusMessage = () => {
  return useContext(SetOnlineStatusMessageContext);
};

// combination of both getter and setter (also provides backward compatability)
export const useOnlineStatusMessage = () => {
  const onlineStatusMessage = useOnlineStatusMessageValue();
  const setOnlineStatusMessage = useSetOnlineStatusMessage();
  return {
    onlineStatusMessage,
    setOnlineStatusMessage
  };
};