"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGlobalState = exports.createStore = exports.GlobalStateProvider = void 0;
exports.useGlobalStateMutation = useGlobalStateMutation;
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// This file creates a redux-like state management service using React context
// that minimizes unnecessary rerenders that consume the context.
// See more at https://github.com/amcgee/state-service-poc

const identity = state => state;
const createStore = function () {
  let initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const subscriptions = new Set();
  let state = initialState;
  return {
    getState: () => state,
    subscribe: callback => {
      subscriptions.add(callback);
    },
    unsubscribe: callback => {
      subscriptions.delete(callback);
    },
    mutate: mutation => {
      state = mutation(state);
      for (const callback of subscriptions) {
        callback(state);
      }
    }
  };
};
exports.createStore = createStore;
const GlobalStateContext = /*#__PURE__*/_react.default.createContext(createStore());
const useGlobalStateStore = () => (0, _react.useContext)(GlobalStateContext);
const GlobalStateProvider = _ref => {
  let {
    store,
    children
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(GlobalStateContext.Provider, {
    value: store
  }, children);
};
exports.GlobalStateProvider = GlobalStateProvider;
GlobalStateProvider.propTypes = {
  children: _propTypes.default.node,
  store: _propTypes.default.shape({})
};
const useGlobalState = function () {
  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : identity;
  const store = useGlobalStateStore();
  const [selectedState, setSelectedState] = (0, _react.useState)(selector(store.getState()));
  (0, _react.useEffect)(() => {
    // NEW: deep equality check before updating
    const callback = state => {
      const newSelectedState = selector(state);
      // Use this form to avoid having `selectedState` as a dep in here
      setSelectedState(currentSelectedState => {
        // Second condition handles case where a selected object gets
        // deleted, but state does not update
        if (!(0, _isEqual.default)(currentSelectedState, newSelectedState) || currentSelectedState === undefined) {
          return newSelectedState;
        }
        return currentSelectedState;
      });
    };
    store.subscribe(callback);
    // Make sure to update state when selector changes
    callback(store.getState());
    return () => store.unsubscribe(callback);
  }, [store, selector]);
  return (0, _react.useMemo)(() => [selectedState, store.mutate], [selectedState, store.mutate]);
};
exports.useGlobalState = useGlobalState;
function useGlobalStateMutation(mutationCreator) {
  const store = useGlobalStateStore();
  return (0, _react.useCallback)(function () {
    store.mutate(mutationCreator(...arguments));
  }, [mutationCreator, store]);
}