"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CacheableSection = CacheableSection;
exports.useCacheableSection = useCacheableSection;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _cacheableSectionState = require("./cacheable-section-state");
var _offlineInterface = require("./offline-interface");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const recordingStates = {
  default: 'default',
  pending: 'pending',
  recording: 'recording',
  error: 'error'
};
/**
 * Returns the main controls for a cacheable section and manages recording
 * state, which affects the render state of the CacheableSection component.
 * Also returns the cached status of the section, which come straight from
 * the `useCachedSection` hook.
 *
 * @param {String} id
 * @returns {Object}
 */
function useCacheableSection(id) {
  const offlineInterface = (0, _offlineInterface.useOfflineInterface)();
  const {
    isCached,
    lastUpdated,
    remove,
    syncCachedSections
  } = (0, _cacheableSectionState.useCachedSection)(id);
  const {
    recordingState,
    setRecordingState,
    removeRecordingState
  } = (0, _cacheableSectionState.useRecordingState)(id);
  (0, _react.useEffect)(() => {
    // On mount, add recording state for this ID to context if needed
    if (!recordingState) {
      setRecordingState(recordingStates.default);
    }
    // On unnmount, remove recording state if not recording
    return () => {
      if (recordingState && recordingState !== recordingStates.recording && recordingState !== recordingStates.pending) {
        removeRecordingState();
      }
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  const onRecordingStarted = (0, _react.useCallback)(() => {
    setRecordingState(recordingStates.recording);
  }, [setRecordingState]);
  const onRecordingCompleted = (0, _react.useCallback)(() => {
    setRecordingState(recordingStates.default);
    syncCachedSections();
  }, [setRecordingState, syncCachedSections]);
  const onRecordingError = (0, _react.useCallback)(error => {
    console.error('Error during recording:', error);
    setRecordingState(recordingStates.error);
  }, [setRecordingState]);
  const startRecording = (0, _react.useCallback)(function () {
    let {
      recordingTimeoutDelay = 1000,
      onStarted,
      onCompleted,
      onError
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // This promise resolving means that the message to the service worker
    // to start recording was successful. Waiting for resolution prevents
    // unnecessarily rerendering the whole component in case of an error
    return offlineInterface.startRecording({
      sectionId: id,
      recordingTimeoutDelay,
      onStarted: () => {
        // Flush this state update synchronously so that the
        // right recordingState is set before any other callbacks
        (0, _reactDom.flushSync)(() => {
          onRecordingStarted();
        });
        onStarted && onStarted();
      },
      onCompleted: () => {
        (0, _reactDom.flushSync)(() => {
          onRecordingCompleted();
        });
        onCompleted && onCompleted();
      },
      onError: error => {
        (0, _reactDom.flushSync)(() => {
          onRecordingError(error);
        });
        onError && onError(error);
      }
    }).then(() => setRecordingState(recordingStates.pending));
  }, [id, offlineInterface, onRecordingCompleted, onRecordingError, onRecordingStarted, setRecordingState]);

  // isCached, lastUpdated, remove: _could_ be accessed by useCachedSection,
  // but provided through this hook for convenience
  return (0, _react.useMemo)(() => ({
    recordingState,
    startRecording,
    lastUpdated,
    isCached,
    remove
  }), [recordingState, startRecording, lastUpdated, isCached, remove]);
}
/**
 * Used to wrap the relevant component to be recorded and saved offline.
 * Depending on the recording state of the section, this wrapper will
 * render its children, not render its children while recording is pending,
 * or RErerender the chilren to force data fetching to record by the service
 * worker.
 *
 * During recording, a loading mask provided by props is also rendered that is
 * intended to prevent other interaction with the app that might interfere
 * with the recording process.
 */
function CacheableSection(_ref) {
  let {
    id,
    loadingMask,
    children
  } = _ref;
  // Accesses recording state that useCacheableSection controls
  const {
    recordingState
  } = (0, _cacheableSectionState.useRecordingState)(id);

  // The following causes the component to reload in the event of a recording
  // error; the state will be cleared next time recording moves to pending.
  // It fixes a component getting stuck while rendered without data after
  // failing a recording while offline.
  // Errors can be handled in the `onError` callback to `startRecording`.
  if (recordingState === recordingStates.error) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
  }

  // Handling rendering with the following conditions prevents an unncessary
  // rerender after successful recording
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, recordingState === recordingStates.recording && loadingMask, recordingState !== recordingStates.pending && children);
}
CacheableSection.propTypes = {
  id: _propTypes.default.string.isRequired,
  children: _propTypes.default.node,
  loadingMask: _propTypes.default.node
};