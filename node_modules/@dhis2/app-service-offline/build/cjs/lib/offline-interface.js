"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OfflineInterfaceProvider = OfflineInterfaceProvider;
exports.useOfflineInterface = useOfflineInterface;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// This is to prevent 'offlineInterface could be null' type-checking errors
const noopOfflineInterface = {
  pwaEnabled: false,
  latestIsConnected: false,
  subscribeToDhis2ConnectionStatus: () => () => undefined,
  startRecording: async () => undefined,
  getCachedSections: async () => [],
  removeSection: async () => false
};
const OfflineInterfaceContext = /*#__PURE__*/(0, _react.createContext)(noopOfflineInterface);
/**
 * Receives an OfflineInterface instance as a prop (presumably from the app
 * adapter) and provides it as context for other offline tools.
 *
 * On mount, it initializes the offline interface, which (among other things)
 * checks for service worker updates and, if updates are ready, prompts the
 * user with an alert to skip waiting and reload the page to use new content.
 */
function OfflineInterfaceProvider(_ref) {
  let {
    offlineInterface,
    children
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(OfflineInterfaceContext.Provider, {
    value: offlineInterface
  }, children);
}
OfflineInterfaceProvider.propTypes = {
  children: _propTypes.default.node,
  offlineInterface: _propTypes.default.shape({
    init: _propTypes.default.func
  })
};
function useOfflineInterface() {
  const offlineInterface = (0, _react.useContext)(OfflineInterfaceContext);
  if (offlineInterface === undefined) {
    throw new Error('Offline interface context not found. If this app is using the app platform, make sure `pwa: { enabled: true }` is in d2.config.js. If this is not a platform app, make sure your app is wrapped with an app-runtime <Provider> or an <OfflineProvider> from app-service-offline.');
  }
  return offlineInterface;
}