"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSetOnlineStatusMessage = exports.useOnlineStatusMessageValue = exports.useOnlineStatusMessage = exports.OnlineStatusMessageProvider = void 0;
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// 'get' and 'set' contexts are separated so 'setter' consumers that don't
// actually need the value don't have to rerender when the value changes:
const OnlineStatusMessageValueContext = /*#__PURE__*/_react.default.createContext(undefined);
const SetOnlineStatusMessageContext = /*#__PURE__*/_react.default.createContext(() => undefined);
const OnlineStatusMessageProvider = _ref => {
  let {
    children
  } = _ref;
  const [onlineStatusMessage, setOnlineStatusMessage] = (0, _react.useState)(); // note: not undefined

  return /*#__PURE__*/_react.default.createElement(OnlineStatusMessageValueContext.Provider, {
    value: onlineStatusMessage
  }, /*#__PURE__*/_react.default.createElement(SetOnlineStatusMessageContext.Provider, {
    value: setOnlineStatusMessage
  }, children));
};
exports.OnlineStatusMessageProvider = OnlineStatusMessageProvider;
const useOnlineStatusMessageValue = () => {
  return (0, _react.useContext)(OnlineStatusMessageValueContext);
};
exports.useOnlineStatusMessageValue = useOnlineStatusMessageValue;
const useSetOnlineStatusMessage = () => {
  return (0, _react.useContext)(SetOnlineStatusMessageContext);
};

// combination of both getter and setter (also provides backward compatability)
exports.useSetOnlineStatusMessage = useSetOnlineStatusMessage;
const useOnlineStatusMessage = () => {
  const onlineStatusMessage = useOnlineStatusMessageValue();
  const setOnlineStatusMessage = useSetOnlineStatusMessage();
  return {
    onlineStatusMessage,
    setOnlineStatusMessage
  };
};
exports.useOnlineStatusMessage = useOnlineStatusMessage;