import {
  require_react
} from "./chunk-YIST7YBS.js";
import {
  __commonJS
} from "./chunk-PR4QN5HX.js";

// node_modules/string-hash/index.js
var require_string_hash = __commonJS({
  "node_modules/string-hash/index.js"(exports, module) {
    "use strict";
    function hash(str) {
      var hash2 = 5381, i = str.length;
      while (i) {
        hash2 = hash2 * 33 ^ str.charCodeAt(--i);
      }
      return hash2 >>> 0;
    }
    module.exports = hash;
  }
});

// node_modules/styled-jsx/dist/lib/stylesheet.js
var require_stylesheet = __commonJS({
  "node_modules/styled-jsx/dist/lib/stylesheet.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var isProd = typeof process !== "undefined" && process.env && false;
    var isString = function isString2(o) {
      return Object.prototype.toString.call(o) === "[object String]";
    };
    var StyleSheet = function() {
      function StyleSheet2(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, _ref$name = _ref.name, name = _ref$name === void 0 ? "stylesheet" : _ref$name, _ref$optimizeForSpeed = _ref.optimizeForSpeed, optimizeForSpeed = _ref$optimizeForSpeed === void 0 ? isProd : _ref$optimizeForSpeed, _ref$isBrowser = _ref.isBrowser, isBrowser = _ref$isBrowser === void 0 ? typeof window !== "undefined" : _ref$isBrowser;
        invariant(isString(name), "`name` must be a string");
        this._name = name;
        this._deletedRulePlaceholder = "#" + name + "-deleted-rule____{}";
        invariant(typeof optimizeForSpeed === "boolean", "`optimizeForSpeed` must be a boolean");
        this._optimizeForSpeed = optimizeForSpeed;
        this._isBrowser = isBrowser;
        this._serverSheet = void 0;
        this._tags = [];
        this._injected = false;
        this._rulesCount = 0;
        var node = this._isBrowser && document.querySelector('meta[property="csp-nonce"]');
        this._nonce = node ? node.getAttribute("content") : null;
      }
      var _proto = StyleSheet2.prototype;
      _proto.setOptimizeForSpeed = function setOptimizeForSpeed(bool) {
        invariant(typeof bool === "boolean", "`setOptimizeForSpeed` accepts a boolean");
        invariant(this._rulesCount === 0, "optimizeForSpeed cannot be when rules have already been inserted");
        this.flush();
        this._optimizeForSpeed = bool;
        this.inject();
      };
      _proto.isOptimizeForSpeed = function isOptimizeForSpeed() {
        return this._optimizeForSpeed;
      };
      _proto.inject = function inject() {
        var _this = this;
        invariant(!this._injected, "sheet already injected");
        this._injected = true;
        if (this._isBrowser && this._optimizeForSpeed) {
          this._tags[0] = this.makeStyleTag(this._name);
          this._optimizeForSpeed = "insertRule" in this.getSheet();
          if (!this._optimizeForSpeed) {
            if (!isProd) {
              console.warn("StyleSheet: optimizeForSpeed mode not supported falling back to standard mode.");
            }
            this.flush();
            this._injected = true;
          }
          return;
        }
        this._serverSheet = {
          cssRules: [],
          insertRule: function insertRule(rule, index) {
            if (typeof index === "number") {
              _this._serverSheet.cssRules[index] = {
                cssText: rule
              };
            } else {
              _this._serverSheet.cssRules.push({
                cssText: rule
              });
            }
            return index;
          },
          deleteRule: function deleteRule(index) {
            _this._serverSheet.cssRules[index] = null;
          }
        };
      };
      _proto.getSheetForTag = function getSheetForTag(tag) {
        if (tag.sheet) {
          return tag.sheet;
        }
        for (var i = 0; i < document.styleSheets.length; i++) {
          if (document.styleSheets[i].ownerNode === tag) {
            return document.styleSheets[i];
          }
        }
      };
      _proto.getSheet = function getSheet() {
        return this.getSheetForTag(this._tags[this._tags.length - 1]);
      };
      _proto.insertRule = function insertRule(rule, index) {
        invariant(isString(rule), "`insertRule` accepts only strings");
        if (!this._isBrowser) {
          if (typeof index !== "number") {
            index = this._serverSheet.cssRules.length;
          }
          this._serverSheet.insertRule(rule, index);
          return this._rulesCount++;
        }
        if (this._optimizeForSpeed) {
          var sheet = this.getSheet();
          if (typeof index !== "number") {
            index = sheet.cssRules.length;
          }
          try {
            sheet.insertRule(rule, index);
          } catch (error) {
            if (!isProd) {
              console.warn("StyleSheet: illegal rule: \n\n" + rule + "\n\nSee https://stackoverflow.com/q/20007992 for more info");
            }
            return -1;
          }
        } else {
          var insertionPoint = this._tags[index];
          this._tags.push(this.makeStyleTag(this._name, rule, insertionPoint));
        }
        return this._rulesCount++;
      };
      _proto.replaceRule = function replaceRule(index, rule) {
        if (this._optimizeForSpeed || !this._isBrowser) {
          var sheet = this._isBrowser ? this.getSheet() : this._serverSheet;
          if (!rule.trim()) {
            rule = this._deletedRulePlaceholder;
          }
          if (!sheet.cssRules[index]) {
            return index;
          }
          sheet.deleteRule(index);
          try {
            sheet.insertRule(rule, index);
          } catch (error) {
            if (!isProd) {
              console.warn("StyleSheet: illegal rule: \n\n" + rule + "\n\nSee https://stackoverflow.com/q/20007992 for more info");
            }
            sheet.insertRule(this._deletedRulePlaceholder, index);
          }
        } else {
          var tag = this._tags[index];
          invariant(tag, "old rule at index `" + index + "` not found");
          tag.textContent = rule;
        }
        return index;
      };
      _proto.deleteRule = function deleteRule(index) {
        if (!this._isBrowser) {
          this._serverSheet.deleteRule(index);
          return;
        }
        if (this._optimizeForSpeed) {
          this.replaceRule(index, "");
        } else {
          var tag = this._tags[index];
          invariant(tag, "rule at index `" + index + "` not found");
          tag.parentNode.removeChild(tag);
          this._tags[index] = null;
        }
      };
      _proto.flush = function flush() {
        this._injected = false;
        this._rulesCount = 0;
        if (this._isBrowser) {
          this._tags.forEach(function(tag) {
            return tag && tag.parentNode.removeChild(tag);
          });
          this._tags = [];
        } else {
          this._serverSheet.cssRules = [];
        }
      };
      _proto.cssRules = function cssRules() {
        var _this2 = this;
        if (!this._isBrowser) {
          return this._serverSheet.cssRules;
        }
        return this._tags.reduce(function(rules, tag) {
          if (tag) {
            rules = rules.concat(Array.prototype.map.call(_this2.getSheetForTag(tag).cssRules, function(rule) {
              return rule.cssText === _this2._deletedRulePlaceholder ? null : rule;
            }));
          } else {
            rules.push(null);
          }
          return rules;
        }, []);
      };
      _proto.makeStyleTag = function makeStyleTag(name, cssString, relativeToTag) {
        if (cssString) {
          invariant(isString(cssString), "makeStyleTag acceps only strings as second parameter");
        }
        var tag = document.createElement("style");
        if (this._nonce) tag.setAttribute("nonce", this._nonce);
        tag.type = "text/css";
        tag.setAttribute("data-" + name, "");
        if (cssString) {
          tag.appendChild(document.createTextNode(cssString));
        }
        var head = document.head || document.getElementsByTagName("head")[0];
        if (relativeToTag) {
          head.insertBefore(tag, relativeToTag);
        } else {
          head.appendChild(tag);
        }
        return tag;
      };
      _createClass(StyleSheet2, [{
        key: "length",
        get: function get() {
          return this._rulesCount;
        }
      }]);
      return StyleSheet2;
    }();
    exports["default"] = StyleSheet;
    function invariant(condition, message) {
      if (!condition) {
        throw new Error("StyleSheet: " + message + ".");
      }
    }
  }
});

// node_modules/styled-jsx/dist/stylesheet-registry.js
var require_stylesheet_registry = __commonJS({
  "node_modules/styled-jsx/dist/stylesheet-registry.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _stringHash = _interopRequireDefault(require_string_hash());
    var _stylesheet = _interopRequireDefault(require_stylesheet());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var sanitize = function sanitize2(rule) {
      return rule.replace(/\/style/gi, "\\/style");
    };
    var StyleSheetRegistry = function() {
      function StyleSheetRegistry2(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, _ref$styleSheet = _ref.styleSheet, styleSheet = _ref$styleSheet === void 0 ? null : _ref$styleSheet, _ref$optimizeForSpeed = _ref.optimizeForSpeed, optimizeForSpeed = _ref$optimizeForSpeed === void 0 ? false : _ref$optimizeForSpeed, _ref$isBrowser = _ref.isBrowser, isBrowser = _ref$isBrowser === void 0 ? typeof window !== "undefined" : _ref$isBrowser;
        this._sheet = styleSheet || new _stylesheet["default"]({
          name: "styled-jsx",
          optimizeForSpeed
        });
        this._sheet.inject();
        if (styleSheet && typeof optimizeForSpeed === "boolean") {
          this._sheet.setOptimizeForSpeed(optimizeForSpeed);
          this._optimizeForSpeed = this._sheet.isOptimizeForSpeed();
        }
        this._isBrowser = isBrowser;
        this._fromServer = void 0;
        this._indices = {};
        this._instancesCounts = {};
        this.computeId = this.createComputeId();
        this.computeSelector = this.createComputeSelector();
      }
      var _proto = StyleSheetRegistry2.prototype;
      _proto.add = function add(props) {
        var _this = this;
        if (void 0 === this._optimizeForSpeed) {
          this._optimizeForSpeed = Array.isArray(props.children);
          this._sheet.setOptimizeForSpeed(this._optimizeForSpeed);
          this._optimizeForSpeed = this._sheet.isOptimizeForSpeed();
        }
        if (this._isBrowser && !this._fromServer) {
          this._fromServer = this.selectFromServer();
          this._instancesCounts = Object.keys(this._fromServer).reduce(function(acc, tagName) {
            acc[tagName] = 0;
            return acc;
          }, {});
        }
        var _this$getIdAndRules = this.getIdAndRules(props), styleId = _this$getIdAndRules.styleId, rules = _this$getIdAndRules.rules;
        if (styleId in this._instancesCounts) {
          this._instancesCounts[styleId] += 1;
          return;
        }
        var indices = rules.map(function(rule) {
          return _this._sheet.insertRule(rule);
        }).filter(function(index) {
          return index !== -1;
        });
        this._indices[styleId] = indices;
        this._instancesCounts[styleId] = 1;
      };
      _proto.remove = function remove(props) {
        var _this2 = this;
        var _this$getIdAndRules2 = this.getIdAndRules(props), styleId = _this$getIdAndRules2.styleId;
        invariant(styleId in this._instancesCounts, "styleId: `" + styleId + "` not found");
        this._instancesCounts[styleId] -= 1;
        if (this._instancesCounts[styleId] < 1) {
          var tagFromServer = this._fromServer && this._fromServer[styleId];
          if (tagFromServer) {
            tagFromServer.parentNode.removeChild(tagFromServer);
            delete this._fromServer[styleId];
          } else {
            this._indices[styleId].forEach(function(index) {
              return _this2._sheet.deleteRule(index);
            });
            delete this._indices[styleId];
          }
          delete this._instancesCounts[styleId];
        }
      };
      _proto.update = function update(props, nextProps) {
        this.add(nextProps);
        this.remove(props);
      };
      _proto.flush = function flush() {
        this._sheet.flush();
        this._sheet.inject();
        this._fromServer = void 0;
        this._indices = {};
        this._instancesCounts = {};
        this.computeId = this.createComputeId();
        this.computeSelector = this.createComputeSelector();
      };
      _proto.cssRules = function cssRules() {
        var _this3 = this;
        var fromServer = this._fromServer ? Object.keys(this._fromServer).map(function(styleId) {
          return [styleId, _this3._fromServer[styleId]];
        }) : [];
        var cssRules2 = this._sheet.cssRules();
        return fromServer.concat(Object.keys(this._indices).map(function(styleId) {
          return [styleId, _this3._indices[styleId].map(function(index) {
            return cssRules2[index].cssText;
          }).join(_this3._optimizeForSpeed ? "" : "\n")];
        }).filter(function(rule) {
          return Boolean(rule[1]);
        }));
      };
      _proto.createComputeId = function createComputeId() {
        var cache = {};
        return function(baseId, props) {
          if (!props) {
            return "jsx-" + baseId;
          }
          var propsToString = String(props);
          var key = baseId + propsToString;
          if (!cache[key]) {
            cache[key] = "jsx-" + (0, _stringHash["default"])(baseId + "-" + propsToString);
          }
          return cache[key];
        };
      };
      _proto.createComputeSelector = function createComputeSelector(selectoPlaceholderRegexp) {
        if (selectoPlaceholderRegexp === void 0) {
          selectoPlaceholderRegexp = /__jsx-style-dynamic-selector/g;
        }
        var cache = {};
        return function(id, css) {
          if (!this._isBrowser) {
            css = sanitize(css);
          }
          var idcss = id + css;
          if (!cache[idcss]) {
            cache[idcss] = css.replace(selectoPlaceholderRegexp, id);
          }
          return cache[idcss];
        };
      };
      _proto.getIdAndRules = function getIdAndRules(props) {
        var _this4 = this;
        var css = props.children, dynamic = props.dynamic, id = props.id;
        if (dynamic) {
          var styleId = this.computeId(id, dynamic);
          return {
            styleId,
            rules: Array.isArray(css) ? css.map(function(rule) {
              return _this4.computeSelector(styleId, rule);
            }) : [this.computeSelector(styleId, css)]
          };
        }
        return {
          styleId: this.computeId(id),
          rules: Array.isArray(css) ? css : [css]
        };
      };
      _proto.selectFromServer = function selectFromServer() {
        var elements = Array.prototype.slice.call(document.querySelectorAll('[id^="__jsx-"]'));
        return elements.reduce(function(acc, element) {
          var id = element.id.slice(2);
          acc[id] = element;
          return acc;
        }, {});
      };
      return StyleSheetRegistry2;
    }();
    exports["default"] = StyleSheetRegistry;
    function invariant(condition, message) {
      if (!condition) {
        throw new Error("StyleSheetRegistry: " + message + ".");
      }
    }
  }
});

// node_modules/styled-jsx/dist/style.js
var require_style = __commonJS({
  "node_modules/styled-jsx/dist/style.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports["default"] = JSXStyle;
    exports.flush = flush;
    var _react = require_react();
    var _stylesheetRegistry = _interopRequireDefault(require_stylesheet_registry());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var styleSheetRegistry = new _stylesheetRegistry["default"]();
    function JSXStyle(props) {
      if (typeof window === "undefined") {
        styleSheetRegistry.add(props);
        return null;
      }
      (0, _react.useLayoutEffect)(function() {
        styleSheetRegistry.add(props);
        return function() {
          styleSheetRegistry.remove(props);
        };
      }, [props.id, String(props.dynamic)]);
      return null;
    }
    JSXStyle.dynamic = function(info) {
      return info.map(function(tagInfo) {
        var baseId = tagInfo[0];
        var props = tagInfo[1];
        return styleSheetRegistry.computeId(baseId, props);
      }).join(" ");
    };
    function flush() {
      var cssRules = styleSheetRegistry.cssRules();
      styleSheetRegistry.flush();
      return cssRules;
    }
  }
});

// node_modules/styled-jsx/style.js
var require_style2 = __commonJS({
  "node_modules/styled-jsx/style.js"(exports, module) {
    module.exports = require_style();
  }
});

export {
  require_style2 as require_style
};
//# sourceMappingURL=chunk-E5EWEQKU.js.map
