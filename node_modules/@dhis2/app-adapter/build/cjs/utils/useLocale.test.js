"use strict";

var _appRuntime = require("@dhis2/app-runtime");
var _d2I18n = _interopRequireDefault(require("@dhis2/d2-i18n"));
var _react = require("@testing-library/react");
var _moment = _interopRequireDefault(require("moment"));
var _useLocale = require("./useLocale.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Note about mocks:
// Luckily, `await import(`moment/locale/${locale}`)` as used in
// `setMomentLocale` in `localeUtils.js` works the same in the Jest environment
// as in the real world, so it doesn't need mocking

// NB: To keep tests simpler, useDataQuery will be considered synchronous,
// and loading logic isn't tested
jest.mock('@dhis2/app-runtime', () => ({
  ...jest.requireActual('@dhis2/app-runtime'),
  useDataQuery: jest.fn()
}));
jest.mock('@dhis2/d2-i18n', () => {
  return {
    setDefaultNamespace: jest.fn(),
    // These cases match translation files we have
    hasResourceBundle: jest.fn(localeString => {
      switch (localeString) {
        case 'uz_UZ_Cyrl':
        case 'uz_UZ_Latn':
        case 'pt_BR':
        case 'ar':
        case 'en':
          return true;
        default:
          return false;
      }
    }),
    changeLanguage: jest.fn(),
    // rough approximation of behavior for locales used in this file:
    dir: jest.fn(localeString => localeString.startsWith('ar') ? 'rtl' : 'ltr')
  };
});
jest.mock('moment', () => ({
  locale: jest.fn(),
  defineLocale: jest.fn()
}));
jest.spyOn(document.documentElement, 'setAttribute');
afterEach(() => {
  jest.clearAllMocks();
});
test('happy path initial load with en language', async () => {
  _appRuntime.useDataQuery.mockReturnValue({
    data: {
      userSettings: {
        keyUiLocale: 'en'
      }
    }
  });
  const {
    result
  } = (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)());
  expect(result.current.loading).toBe(false);
  expect(result.current.locale.baseName).toBe('en');
  expect(result.current.direction).toBe('ltr');
  expect(_d2I18n.default.changeLanguage).toHaveBeenCalledWith('en');
  // this will only be valid on the first test:
  expect(_d2I18n.default.setDefaultNamespace).toHaveBeenCalledWith('default');
  // moment.locale doesn't need to get called if the language is 'en'...
  // but it's asynchronous anyway. See following tests
  expect(_moment.default.locale).not.toHaveBeenCalled();
  expect(document.documentElement.setAttribute).toHaveBeenCalledWith('dir', 'ltr');
  expect(document.documentElement.setAttribute).toHaveBeenCalledWith('lang', 'en');
});
describe('formerly problematic locales', () => {
  // For pt_BR (Portuguese in Brazil), before fixes:
  // 1. i18n.dir didn't work because it needs a BCP47-formatted string
  // 2. The Moment locale didn't work, because it uses another format
  test('pt_BR locale', async () => {
    _appRuntime.useDataQuery.mockReturnValue({
      data: {
        userSettings: {
          keyUiLocale: 'pt_BR'
        }
      }
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)());
    expect(result.current.direction).toBe('ltr');
    // Notice different locale formats
    expect(result.current.locale.baseName).toBe('pt-BR');
    expect(_d2I18n.default.changeLanguage).toHaveBeenCalledWith('pt_BR');
    // Dynamic imports of Moment locales is asynchronous
    await (0, _react.waitFor)(() => {
      expect(_moment.default.locale).toHaveBeenCalledWith('pt-br');
    });
  });

  // For ar_EG (Arabic in Egypt), before fixes:
  // 1. i18n.dir didn't work because it needs a BCP47-formatted string
  // 2. Setting the i18next language didn't work because there are not translation
  // files for it (as of now, Jan 2024). This behavior is mocked above with
  // `i18n.hasResourceBundle()`
  // [Recent fixes allow for a fallback to simpler locales, e.g. 'ar',
  // for much better support]
  // 3. The Moment locale didn't work, both because of formatting and failing to
  // fall back to simpler locales
  test('ar_EG locale', async () => {
    _appRuntime.useDataQuery.mockReturnValue({
      data: {
        userSettings: {
          keyUiLocale: 'ar_EG'
        }
      }
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)());
    expect(result.current.direction).toBe('rtl');
    expect(result.current.locale.baseName).toBe('ar-EG');
    // Notice fallbacks
    expect(_d2I18n.default.changeLanguage).toHaveBeenCalledWith('ar');
    await (0, _react.waitFor)(() => {
      expect(_moment.default.locale).toHaveBeenCalledWith('ar');
    });
  });

  // for uz_UZ_Cyrl before fixes:
  // 1. i18n.dir didn't work because it needs a BCP47-formatted string
  // 2. Moment locales didn't work due to formatting and lack of fallback
  test('uz_UZ_Cyrl locale', async () => {
    _appRuntime.useDataQuery.mockReturnValue({
      data: {
        userSettings: {
          keyUiLocale: 'uz_UZ_Cyrl'
        }
      }
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)());
    expect(result.current.direction).toBe('ltr');
    expect(result.current.locale.baseName).toBe('uz-Cyrl-UZ');
    expect(_d2I18n.default.changeLanguage).toHaveBeenCalledWith('uz_UZ_Cyrl');
    await (0, _react.waitFor)(() => {
      expect(_moment.default.locale).toHaveBeenCalledWith('uz');
    });
  });
  // Similar for UZ Latin -- notice difference in the Moment locale
  test('uz_UZ_Latn locale', async () => {
    _appRuntime.useDataQuery.mockReturnValue({
      data: {
        userSettings: {
          keyUiLocale: 'uz_UZ_Latn'
        }
      }
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)());
    expect(result.current.direction).toBe('ltr');
    expect(result.current.locale.baseName).toBe('uz-Latn-UZ');
    expect(_d2I18n.default.changeLanguage).toHaveBeenCalledWith('uz_UZ_Latn');
    await (0, _react.waitFor)(() => {
      expect(_moment.default.locale).toHaveBeenCalledWith('uz-latn');
    });
  });
});
describe('other userSettings cases', () => {
  beforeEach(() => {
    // Mock browser language
    jest.spyOn(window.navigator, 'language', 'get').mockImplementation(() => 'ar-EG');
  });
  test('proposed keyUiLanguageTag property is used (preferrentially)', async () => {
    _appRuntime.useDataQuery.mockReturnValue({
      data: {
        userSettings: {
          keyUiLocale: 'en',
          keyUiLanguageTag: 'pt-BR'
        }
      }
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)());
    expect(result.current.direction).toBe('ltr');
    expect(result.current.locale.baseName).toBe('pt-BR');
    expect(_d2I18n.default.changeLanguage).toHaveBeenCalledWith('pt_BR');
    await (0, _react.waitFor)(() => {
      expect(_moment.default.locale).toHaveBeenCalledWith('pt-br');
    });
  });
  test('keyUiLocale is missing from user settings for some reason (should fall back to browser language)', async () => {
    _appRuntime.useDataQuery.mockReturnValue({
      data: {
        userSettings: {}
      }
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)());
    expect(result.current.direction).toBe('rtl');
    expect(result.current.locale.baseName).toBe('ar-EG');
    expect(_d2I18n.default.changeLanguage).toHaveBeenCalledWith('ar');
    await (0, _react.waitFor)(() => {
      expect(_moment.default.locale).toHaveBeenCalledWith('ar');
    });
  });
  test('keyUiLocale is nonsense (should fall back to browser language)', async () => {
    _appRuntime.useDataQuery.mockReturnValue({
      data: {
        userSettings: {
          keyUiLocale: 'shouldCauseError'
        }
      }
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)());
    expect(result.current.direction).toBe('rtl');
    expect(result.current.locale.baseName).toBe('ar-EG');
    expect(_d2I18n.default.changeLanguage).toHaveBeenCalledWith('ar');
    await (0, _react.waitFor)(() => {
      expect(_moment.default.locale).toHaveBeenCalledWith('ar');
    });
  });
});
describe('config direction is respected for the document direction', () => {
  test('ltr is the default and is used even for rtl languages', async () => {
    _appRuntime.useDataQuery.mockReturnValue({
      data: {
        userSettings: {
          keyUiLocale: 'ar'
        }
      }
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)());
    expect(result.current.direction).toBe('rtl');
    expect(document.documentElement.setAttribute).toHaveBeenCalledWith('dir', 'ltr');
  });
  test('rtl will be used for the document if configured, even for an ltr language', () => {
    _appRuntime.useDataQuery.mockReturnValue({
      data: {
        userSettings: {
          keyUiLocale: 'en'
        }
      }
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)('rtl'));
    expect(result.current.direction).toBe('ltr');
    expect(document.documentElement.setAttribute).toHaveBeenCalledWith('dir', 'rtl');
  });
  test('if auto is used, document dir will match the language dir (ltr)', () => {
    _appRuntime.useDataQuery.mockReturnValue({
      data: {
        userSettings: {
          keyUiLocale: 'en'
        }
      }
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)('auto'));
    expect(result.current.direction).toBe('ltr');
    expect(document.documentElement.setAttribute).toHaveBeenCalledWith('dir', 'ltr');
  });
  test('if auto is used, document dir will match the language dir (ltr)', () => {
    _appRuntime.useDataQuery.mockReturnValue({
      data: {
        userSettings: {
          keyUiLocale: 'ar'
        }
      }
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)('auto'));
    expect(result.current.direction).toBe('rtl');
    expect(document.documentElement.setAttribute).toHaveBeenCalledWith('dir', 'rtl');
  });
  test('nonstandard config directions fall back to ltr', () => {
    _appRuntime.useDataQuery.mockReturnValue({
      data: {
        userSettings: {
          keyUiLocale: 'ar'
        }
      }
    });
    const {
      result
    } = (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)('whoopslol'));
    expect(result.current.direction).toBe('rtl');
    expect(document.documentElement.setAttribute).toHaveBeenCalledWith('dir', 'ltr');
  });
});
test('document `lang` attribute is set', () => {
  _appRuntime.useDataQuery.mockReturnValue({
    data: {
      userSettings: {
        keyUiLocale: 'pt_BR'
      }
    }
  });
  (0, _react.renderHook)(() => (0, _useLocale.useCurrentUserLocale)());
  expect(document.documentElement.setAttribute).toHaveBeenCalledWith('lang', 'pt-BR');
});