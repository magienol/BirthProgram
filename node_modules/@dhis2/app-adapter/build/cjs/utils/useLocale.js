"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSystemDefaultLocale = exports.useCurrentUserLocale = void 0;
var _appRuntime = require("@dhis2/app-runtime");
var _d2I18n = _interopRequireDefault(require("@dhis2/d2-i18n"));
var _react = require("react");
var _localeUtils = require("./localeUtils.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const useLocale = _ref => {
  let {
    userSettings,
    configDirection
  } = _ref;
  const [result, setResult] = (0, _react.useState)({
    locale: undefined,
    direction: undefined
  });
  (0, _react.useEffect)(() => {
    if (!userSettings) {
      return;
    }
    const locale = (0, _localeUtils.parseLocale)(userSettings);
    (0, _localeUtils.setI18nLocale)(locale);
    (0, _localeUtils.setMomentLocale)(locale);

    // Intl.Locale dir utils aren't supported in firefox, so use i18n
    const localeDirection = _d2I18n.default.dir(locale.language);
    (0, _localeUtils.setDocumentDirection)({
      localeDirection,
      configDirection
    });
    document.documentElement.setAttribute('lang', locale.baseName);
    setResult({
      locale,
      direction: localeDirection
    });
  }, [userSettings, configDirection]);
  return result;
};
const settingsQuery = {
  userSettings: {
    resource: 'userSettings'
  }
};
// note: userSettings.keyUiLocale is expected to be in the Java format,
// e.g. 'ar', 'ar_IQ', 'uz_UZ_Cyrl', etc.
const useCurrentUserLocale = configDirection => {
  const {
    loading,
    error,
    data
  } = (0, _appRuntime.useDataQuery)(settingsQuery);
  const {
    locale,
    direction
  } = useLocale({
    userSettings: data && data.userSettings,
    configDirection
  });
  if (error) {
    // This shouldn't happen, trigger the fatal error boundary
    throw new Error('Failed to fetch user locale: ' + error);
  }
  return {
    loading: loading || !locale,
    locale,
    direction
  };
};
exports.useCurrentUserLocale = useCurrentUserLocale;
const loginConfigQuery = {
  loginConfig: {
    resource: 'loginConfig'
  }
};
const useSystemDefaultLocale = () => {
  // system language from loginConfiqQuery
  const {
    loading,
    data,
    error
  } = (0, _appRuntime.useDataQuery)(loginConfigQuery);
  // set userSettings to use system locale by default
  const localeInformation = (0, _react.useMemo)(() => {
    var _data$loginConfig;
    return {
      userSettings: {
        keyUiLocale: data && ((data === null || data === void 0 ? void 0 : (_data$loginConfig = data.loginConfig) === null || _data$loginConfig === void 0 ? void 0 : _data$loginConfig.uiLocale) || window.navigator.language)
      },
      configDirection: 'auto'
    };
  }, [data]);
  const locale = useLocale(localeInformation);
  if (error) {
    console.error(error);
  }
  return {
    loading: loading || !locale,
    locale
  };
};
exports.useSystemDefaultLocale = useSystemDefaultLocale;