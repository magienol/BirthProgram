"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoginModal = void 0;
var _style = _interopRequireDefault(require("styled-jsx/style"));
var _pwa = require("@dhis2/pwa");
var _ui = require("@dhis2/ui");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _index = _interopRequireDefault(require("../locales/index.js"));
var _api = require("../utils/api.js");
var _LoginModalStyle = require("./styles/LoginModal.style.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Check if base URL is set statically as an env var (typical in production)
const staticUrl = process.env.REACT_APP_DHIS2_BASE_URL;
const getIsNewLoginAPIAvailable = async server => {
  try {
    // if loginConfig is available, the instance can use new endpoints
    await (0, _api.get)(`${server}/api/loginConfig`);
    return true;
  } catch (e) {
    // if loginConfig is not available, the instance must use old endpoints
    console.error(e);
    return false;
  }
};
const loginWithNewEndpoints = async _ref => {
  let {
    server,
    username,
    password,
    setError,
    setIsLoggingIn
  } = _ref;
  try {
    await (0, _api.postJSON)(`${server}/api/auth/login`, JSON.stringify({
      username,
      password
    }));
    window.location.reload();
  } catch (e) {
    setError(e);
    setIsLoggingIn(false);
  }
};
const loginWithOldEndpoints = async _ref2 => {
  let {
    server,
    username,
    password
  } = _ref2;
  try {
    await (0, _api.post)(`${server}/dhis-web-commons-security/login.action`, `j_username=${encodeURIComponent(username)}&j_password=${encodeURIComponent(password)}`);
  } catch (e) {
    console.error(e);
  } finally {
    window.location.reload();
  }
};
const LoginModal = _ref3 => {
  let {
    appName,
    baseUrl,
    loginApp = false
  } = _ref3;
  const [server, setServer] = (0, _react.useState)(baseUrl || '');
  const [username, setUsername] = (0, _react.useState)('');
  const [password, setPassword] = (0, _react.useState)('');
  const [isDirty, setIsDirty] = (0, _react.useState)(false);
  const [error, setError] = (0, _react.useState)(null);
  const [isLoggingIn, setIsLoggingIn] = (0, _react.useState)(false);
  const isValid = val => val && val.length >= 2;
  const getSignInButtonText = _ref4 => {
    let {
      loginApp,
      isLoggingIn
    } = _ref4;
    if (!loginApp) {
      return isLoggingIn ? _index.default.t('Signing in...') : _index.default.t('Sign in');
    }
    return isLoggingIn ? _index.default.t('Going to app...') : _index.default.t('Go to app');
  };
  const onSubmit = async e => {
    e.preventDefault();
    setIsDirty(true);
    if (isValid(server) && (isValid(username) && isValid(password) || loginApp)) {
      setIsLoggingIn(true);
      if (!staticUrl) {
        // keep the localStorage value here -- it's still used in some
        // obscure cases, like in the cypress network shim
        window.localStorage.DHIS2_BASE_URL = server;
        await (0, _pwa.setBaseUrlByAppName)({
          appName,
          baseUrl: server
        });
        if (loginApp) {
          window.location.reload();
        }
      }
      const isNewLoginAPIAvailable = await getIsNewLoginAPIAvailable(server);
      if (isNewLoginAPIAvailable) {
        loginWithNewEndpoints({
          server,
          username,
          password,
          setError,
          setIsLoggingIn
        });
      } else {
        loginWithOldEndpoints({
          server,
          username,
          password
        });
      }
    }
  };
  return /*#__PURE__*/_react.default.createElement(_ui.Modal, {
    open: true,
    small: true,
    dataTest: "dhis2-adapter-loginmodal"
  }, /*#__PURE__*/_react.default.createElement(_style.default, {
    id: _LoginModalStyle.styles.__hash
  }, _LoginModalStyle.styles), /*#__PURE__*/_react.default.createElement("form", {
    onSubmit: onSubmit,
    className: `jsx-${_LoginModalStyle.styles.__hash}`
  }, /*#__PURE__*/_react.default.createElement(_ui.ModalTitle, null, !loginApp ? _index.default.t('Please sign in') : _index.default.t('Specify server')), /*#__PURE__*/_react.default.createElement(_ui.ModalContent, null, error && /*#__PURE__*/_react.default.createElement("div", {
    className: `jsx-${_LoginModalStyle.styles.__hash}` + " " + "errorNotification"
  }, /*#__PURE__*/_react.default.createElement(_ui.NoticeBox, {
    error: true,
    title: _index.default.t('Could not log in')
  }, error === null || error === void 0 ? void 0 : error.message)), !staticUrl && /*#__PURE__*/_react.default.createElement(_ui.InputField, {
    dataTest: "dhis2-adapter-loginserver",
    error: isDirty && !isValid(server),
    label: _index.default.t('Server'),
    name: "server",
    type: "text",
    value: server,
    onChange: input => setServer(input.value)
  }), !loginApp && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.InputField, {
    dataTest: "dhis2-adapter-loginname",
    error: isDirty && !isValid(username),
    label: _index.default.t('Username'),
    name: "j_username",
    type: "text",
    value: username,
    onChange: input => setUsername(input.value)
  }), /*#__PURE__*/_react.default.createElement(_ui.InputField, {
    dataTest: "dhis2-adapter-loginpassword",
    error: isDirty && !isValid(password),
    label: _index.default.t('Password'),
    name: "j_password",
    type: "password",
    value: password,
    onChange: input => setPassword(input.value)
  }))), /*#__PURE__*/_react.default.createElement(_ui.ModalActions, null, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    primary: true,
    dataTest: "dhis2-adapter-loginsubmit",
    type: "submit",
    disabled: isLoggingIn
  }, getSignInButtonText({
    loginApp,
    isLoggingIn
  })))));
};
exports.LoginModal = LoginModal;
LoginModal.propTypes = {
  appName: _propTypes.default.string,
  baseUrl: _propTypes.default.string,
  loginApp: _propTypes.default.bool
};