"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Alerts = void 0;
var _appRuntime = require("@dhis2/app-runtime");
var _ui = require("@dhis2/ui");
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
/* The alerts-manager which populates the `useAlerts` hook from
 * `@dhis2/app-service-alerts` hook with alerts only supports
 * simply adding and removing alerts. However, the `AlertBar`
 * from `@dhis2/ui` should leave the screen with a hide-animation.
 * This works well, for alerts that hide "naturally" (after the
 * timeout expires or when the close icon is clicked). In these
 * cases the component will request to be removed from the alerts-
 * manager after the animation completes. However, when
 * programatically hiding an alert this is the other way around:
 * the alert is removed from the alerts-manager straight away and
 * if we were to render the alerts from the `useAlerts` hook, these
 * alerts would be removed from the DOM abruptly without an animation.
 * To prevent this from happening, we have implemented the
 * `useAlertsWithHideCache` hook:
 *  - It contains all alerts from the alert-manager, with
 *    `options.hidden` set to `false`
 *  - And also alerts which have been removed from the alert-manager,
 *    but still have their leave animation in progress, with
 *    `options.hidden` set to `true`
 *  - Alerts are removed once the `onHidden` callback fires */

const useAlertsWithHideCache = () => {
  const [alertsMap] = (0, _react.useState)(new Map());
  /* We don't use this state value, it is used to trigger
   * a rerender to remove the hidden alert from the DOM */
  const [, setLastRemovedId] = (0, _react.useState)(null);
  const alertManagerAlerts = (0, _appRuntime.useAlerts)();
  const updateAlertsFromManager = (0, _react.useCallback)(function () {
    let newAlerts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    const newAlertsIdLookup = new Set();
    newAlerts.forEach(alert => {
      newAlertsIdLookup.add(alert.id);
      if (!alertsMap.has(alert.id)) {
        // new alerts, these are not hiding
        alertsMap.set(alert.id, {
          ...alert,
          options: {
            ...alert.options,
            hidden: alert.options.hidden || false
          }
        });
      }
    });
    // alerts in alertsMap but not in newAlerts are hiding
    alertsMap.forEach(alert => {
      if (!newAlertsIdLookup.has(alert.id)) {
        alert.options.hidden = true;
      }
    });
  }, [alertsMap]);
  const removeAlert = (0, _react.useCallback)(id => {
    alertsMap.delete(id);
    setLastRemovedId(id);
  }, [alertsMap]);
  updateAlertsFromManager(alertManagerAlerts);
  return {
    alerts: Array.from(alertsMap.values()).sort((a, b) => a.id - b.id),
    removeAlert
  };
};
const Alerts = () => {
  const {
    alerts,
    removeAlert
  } = useAlertsWithHideCache();
  return /*#__PURE__*/_react.default.createElement(_ui.AlertStack, null, alerts.map(_ref => {
    let {
      message,
      remove,
      id,
      options: {
        onHidden,
        ...props
      }
    } = _ref;
    return /*#__PURE__*/_react.default.createElement(_ui.AlertBar, _extends({}, props, {
      key: id,
      onHidden: () => {
        onHidden && onHidden();
        removeAlert(id);
        remove();
      }
    }), message);
  }));
};
exports.Alerts = Alerts;