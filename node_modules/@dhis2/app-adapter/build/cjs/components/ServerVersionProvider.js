"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServerVersionProvider = void 0;
var _appRuntime = require("@dhis2/app-runtime");
var _pwa = require("@dhis2/pwa");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _api = require("../utils/api.js");
var _parseVersion = require("../utils/parseVersion.js");
var _LoadingMask = require("./LoadingMask.js");
var _LoginModal = require("./LoginModal.js");
var _OfflineInterfaceContext = require("./OfflineInterfaceContext.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const ServerVersionProvider = _ref => {
  let {
    appName,
    appVersion,
    url,
    // url from env vars
    apiVersion,
    pwaEnabled,
    plugin,
    parentAlertsAdd,
    showAlertsInPlugin,
    loginApp,
    children
  } = _ref;
  const offlineInterface = (0, _OfflineInterfaceContext.useOfflineInterface)();
  const [systemInfoState, setSystemInfoState] = (0, _react.useState)({
    loading: true,
    error: undefined,
    systemInfo: undefined
  });
  const [baseUrlState, setBaseUrlState] = (0, _react.useState)({
    loading: !url,
    error: undefined,
    baseUrl: url
  });
  // Skip this loading step in non-pwa apps
  const [offlineInterfaceLoading, setOfflineInterfaceLoading] = (0, _react.useState)(pwaEnabled);
  const {
    systemInfo
  } = systemInfoState;
  const {
    baseUrl
  } = baseUrlState;
  (0, _react.useEffect)(() => {
    // if URL prop is not set, set state to error to show login modal.
    // Submitting valid login form with server and credentials reloads page,
    // ostensibly with a filled url prop (now persisted locally)
    if (!baseUrl) {
      // Use a function as the argument to avoid needing baseUrlState as
      // a dependency for useEffect
      setBaseUrlState(state => state.loading ? state : {
        loading: true,
        error: undefined,
        systemInfo: undefined
      });
      // try getting URL from IndexedDB
      (0, _pwa.getBaseUrlByAppName)(appName).then(baseUrlFromDB => {
        if (baseUrlFromDB) {
          // Set baseUrl in state if found in DB
          setBaseUrlState({
            loading: false,
            error: undefined,
            baseUrl: baseUrlFromDB
          });
          return;
        }
        // If no URL found in DB, try localStorage
        // (previous adapter versions stored the base URL there)
        const baseUrlFromLocalStorage = window.localStorage.DHIS2_BASE_URL;
        if (baseUrlFromLocalStorage) {
          setBaseUrlState({
            loading: false,
            error: undefined,
            baseUrl: baseUrlFromLocalStorage
          });
          // Also set it in IndexedDB for SW to access
          return (0, _pwa.setBaseUrlByAppName)({
            appName,
            baseUrl: baseUrlFromLocalStorage
          });
        }
        // If no base URL found in either, set error to show login modal
        setBaseUrlState({
          loading: false,
          error: new Error('No url specified'),
          baseUrl: undefined
        });
      }).catch(err => {
        console.error(err);
        setBaseUrlState({
          loading: false,
          error: err,
          baseUrl: undefined
        });
      });
      return;
    }

    // If url IS set, try querying API to test authentication and get
    // server version. If it fails, set error to show login modal

    setSystemInfoState(state => state.loading ? state : {
      loading: true,
      error: undefined,
      systemInfo: undefined
    });

    // version is available from api/loginConfig
    if (loginApp) {
      const requestLogin = (0, _api.get)(`${baseUrl}/api/loginConfig`);
      requestLogin.then(loginConfig => {
        var _loginConfig$apiVersi;
        setSystemInfoState({
          loading: false,
          error: undefined,
          systemInfo: {
            version: (_loginConfig$apiVersi = loginConfig.apiVersion) !== null && _loginConfig$apiVersi !== void 0 ? _loginConfig$apiVersi : '2.41'
          }
        });
      }).catch(e => {
        setSystemInfoState({
          loading: false,
          error: e,
          systemInfo: undefined
        });
      });
      return;
    }
    const request = (0, _api.get)(`${baseUrl}/api/system/info`);
    request.then(systemInfo => {
      setSystemInfoState({
        loading: false,
        error: undefined,
        systemInfo: systemInfo
      });
    }).catch(e => {
      // Todo: If this is a network error, the app cannot load -- handle that gracefully here
      // if (e === 'Network error') { ... }
      setSystemInfoState({
        loading: false,
        error: e,
        systemInfo: undefined
      });
    });
    return () => {
      request.abort();
    };
  }, [appName, baseUrl, loginApp]);
  (0, _react.useEffect)(() => {
    if (pwaEnabled) {
      offlineInterface.ready.then(() => {
        setOfflineInterfaceLoading(false);
      });
    }
  }, [offlineInterface, pwaEnabled]);

  // This needs to come before 'loading' case to show modal at correct times
  if (systemInfoState.error || baseUrlState.error) {
    return /*#__PURE__*/_react.default.createElement(_LoginModal.LoginModal, {
      appName: appName,
      baseUrl: baseUrl,
      loginApp: loginApp
    });
  }
  if (systemInfoState.loading || baseUrlState.loading || offlineInterfaceLoading) {
    return /*#__PURE__*/_react.default.createElement(_LoadingMask.LoadingMask, null);
  }
  const serverVersion = (0, _parseVersion.parseDHIS2ServerVersion)(systemInfo.version);
  const realApiVersion = serverVersion.minor;
  return /*#__PURE__*/_react.default.createElement(_appRuntime.Provider, {
    config: {
      appName,
      appVersion: (0, _parseVersion.parseVersion)(appVersion),
      baseUrl,
      apiVersion: apiVersion || realApiVersion,
      serverVersion,
      systemInfo,
      pwaEnabled
    },
    offlineInterface: loginApp ? null : offlineInterface,
    plugin: plugin,
    parentAlertsAdd: parentAlertsAdd,
    showAlertsInPlugin: showAlertsInPlugin
  }, children);
};
exports.ServerVersionProvider = ServerVersionProvider;
ServerVersionProvider.propTypes = {
  appName: _propTypes.default.string.isRequired,
  appVersion: _propTypes.default.string.isRequired,
  apiVersion: _propTypes.default.number,
  children: _propTypes.default.element,
  loginApp: _propTypes.default.bool,
  parentAlertsAdd: _propTypes.default.func,
  plugin: _propTypes.default.bool,
  pwaEnabled: _propTypes.default.bool,
  showAlertsInPlugin: _propTypes.default.bool,
  url: _propTypes.default.string
};