import _JSXStyle from "styled-jsx/style";
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import i18n from '@dhis2/d2-i18n';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import buttonStyles from './styles/Button.style.js';
import styles from './styles/ErrorBoundary.style.js';

// In order to avoid using @dhis2/ui components in the error boundary - as anything
// that breaks within it will not be caught properly - we define a component
// with the same styles as Button
const UIButton = _ref => {
  let {
    children,
    onClick,
    plugin
  } = _ref;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: buttonStyles.__hash
  }, buttonStyles), /*#__PURE__*/React.createElement("button", {
    onClick: onClick,
    className: `jsx-${buttonStyles.__hash}` + " " + ((plugin ? 'pluginButton' : null) || "")
  }, children));
};
UIButton.propTypes = {
  children: PropTypes.node.isRequired,
  onClick: PropTypes.func.isRequired,
  plugin: PropTypes.bool
};
const InfoIcon24 = () => /*#__PURE__*/React.createElement("svg", {
  height: "24",
  viewBox: "0 0 24 24",
  width: "24",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/React.createElement("path", {
  d: "m12 2c5.5228475 0 10 4.4771525 10 10s-4.4771525 10-10 10-10-4.4771525-10-10 4.4771525-10 10-10zm0 2c-4.418278 0-8 3.581722-8 8s3.581722 8 8 8 8-3.581722 8-8-3.581722-8-8-8zm1 7v6h-2v-6zm-1-4c.5522847 0 1 .44771525 1 1s-.4477153 1-1 1-1-.44771525-1-1 .4477153-1 1-1z",
  fill: "#A0ADBA"
}));
const translatedErrorHeading = i18n.t('An error occurred in the DHIS2 application.');
export class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "toggleTechInfoDrawer", () => {
      this.setState({
        drawerOpen: !this.state.drawerOpen
      });
    });
    _defineProperty(this, "handleCopyErrorDetails", () => {
      const errorDetails = this.errorDetailsRef.current.textContent;
      navigator.clipboard.writeText(errorDetails).then(() => {
        alert(i18n.t('Technical details copied to clipboard'));
      });
    });
    _defineProperty(this, "handleCopyErrorDetailsPlugin", _ref2 => {
      let {
        error,
        errorInfo
      } = _ref2;
      const errorDetails = `${error}\n${error === null || error === void 0 ? void 0 : error.stack}\n${errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.componentStack}`;
      navigator.clipboard.writeText(errorDetails).then(() => {
        alert(i18n.t('Technical details copied to clipboard'));
      });
    });
    _defineProperty(this, "handleSafeLoginRedirect", () => {
      window.location.href = this.props.baseURL + (this.props.baseURL.endsWith('/') ? '' : '/') + 'dhis-web-commons/security/login.action';
    });
    this.state = {
      error: null,
      errorInfo: null,
      drawerOpen: false
    };
    this.errorDetailsRef = /*#__PURE__*/React.createRef();
  }
  componentDidCatch(error, errorInfo) {
    if (this.props.plugin) {
      if (this.props.onPluginError) {
        console.error(error);
        this.props.onPluginError(error);
      }
    }
    this.setState({
      error,
      errorInfo
    });
  }
  render() {
    const {
      children,
      fullscreen,
      onRetry,
      loginApp,
      baseURL
    } = this.props;
    if (this.state.error) {
      if (this.props.plugin) {
        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_JSXStyle, {
          id: styles.__hash
        }, styles), /*#__PURE__*/React.createElement("div", {
          className: `jsx-${styles.__hash}` + " " + "pluginBoundary"
        }, /*#__PURE__*/React.createElement(InfoIcon24, null), /*#__PURE__*/React.createElement("div", {
          className: `jsx-${styles.__hash}` + " " + "pluginErrorMessage"
        }, i18n.t('There was a problem loading this plugin')), /*#__PURE__*/React.createElement("div", {
          onClick: () => {
            this.handleCopyErrorDetailsPlugin({
              error: this.state.error,
              errorInfo: this.state.errorInfo
            });
          },
          className: `jsx-${styles.__hash}` + " " + "pluginErrorCopy"
        }, i18n.t('Copy debug info to clipboard')), onRetry && /*#__PURE__*/React.createElement("div", {
          className: `jsx-${styles.__hash}` + " " + "pluginRetry"
        }, /*#__PURE__*/React.createElement(UIButton, {
          onClick: onRetry,
          plugin: true
        }, i18n.t('Try again')))));
      }
      return /*#__PURE__*/React.createElement("div", {
        className: `jsx-${styles.__hash}` + " " + (cx('mask', {
          fullscreen
        }) || "")
      }, /*#__PURE__*/React.createElement(_JSXStyle, {
        id: styles.__hash
      }, styles), /*#__PURE__*/React.createElement("div", {
        className: `jsx-${styles.__hash}` + " " + "container"
      }, /*#__PURE__*/React.createElement("h1", {
        className: `jsx-${styles.__hash}` + " " + "message"
      }, i18n.t('Something went wrong')), loginApp && baseURL && /*#__PURE__*/React.createElement("div", {
        className: `jsx-${styles.__hash}` + " " + "retry"
      }, /*#__PURE__*/React.createElement(UIButton, {
        onClick: this.handleSafeLoginRedirect
      }, i18n.t('Redirect to safe login mode'))), onRetry && /*#__PURE__*/React.createElement("div", {
        className: `jsx-${styles.__hash}` + " " + "retry"
      }, /*#__PURE__*/React.createElement(UIButton, {
        onClick: onRetry
      }, i18n.t('Try again'))), /*#__PURE__*/React.createElement("button", {
        onClick: this.toggleTechInfoDrawer,
        className: `jsx-${styles.__hash}` + " " + "drawerToggle"
      }, this.state.drawerOpen ? i18n.t('Hide technical details') : i18n.t('Show technical details')), /*#__PURE__*/React.createElement("div", {
        className: `jsx-${styles.__hash}` + " " + (cx('drawer', {
          hidden: !this.state.drawerOpen
        }) || "")
      }, /*#__PURE__*/React.createElement("div", {
        className: `jsx-${styles.__hash}` + " " + "errorIntro"
      }, /*#__PURE__*/React.createElement("p", {
        className: `jsx-${styles.__hash}`
      }, translatedErrorHeading), /*#__PURE__*/React.createElement("p", {
        className: `jsx-${styles.__hash}`
      }, i18n.t('The following information may be requested by technical support.')), /*#__PURE__*/React.createElement(UIButton, {
        onClick: this.handleCopyErrorDetails
      }, i18n.t('Copy technical details to clipboard'))), /*#__PURE__*/React.createElement("pre", {
        ref: this.errorDetailsRef,
        className: `jsx-${styles.__hash}` + " " + "errorDetails"
      }, `${this.state.error}\n`, this.state.error.stack, this.state.errorInfo.componentStack))));
    }
    return children;
  }
}
ErrorBoundary.propTypes = {
  children: PropTypes.node.isRequired,
  baseURL: PropTypes.string,
  fullscreen: PropTypes.bool,
  loginApp: PropTypes.bool,
  plugin: PropTypes.bool,
  onPluginError: PropTypes.func,
  onRetry: PropTypes.func
};