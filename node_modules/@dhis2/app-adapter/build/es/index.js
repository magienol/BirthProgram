import { checkForSWUpdateAndReload } from '@dhis2/pwa';
import PropTypes from 'prop-types';
import React from 'react';
import { AppWrapper } from './components/AppWrapper.js';
import { ErrorBoundary } from './components/ErrorBoundary.js';
import { LoginAppWrapper } from './components/LoginAppWrapper.js';
import { OfflineInterfaceProvider } from './components/OfflineInterfaceContext.js';
import { PWALoadingBoundary } from './components/PWALoadingBoundary.js';
import { ServerVersionProvider } from './components/ServerVersionProvider.js';
const AppAdapter = _ref => {
  let {
    appName,
    appVersion,
    url,
    apiVersion,
    direction,
    pwaEnabled,
    plugin,
    parentAlertsAdd,
    showAlertsInPlugin,
    onPluginError,
    clearPluginError,
    loginApp,
    children
  } = _ref;
  if (loginApp) {
    return /*#__PURE__*/React.createElement(ErrorBoundary, {
      fullscreen: true,
      onRetry: () => {
        window.location.reload();
      },
      plugin: false,
      loginApp: true,
      baseURL: url
    }, /*#__PURE__*/React.createElement(ServerVersionProvider, {
      appName: appName,
      appVersion: appVersion,
      url: url,
      apiVersion: apiVersion,
      pwaEnabled: pwaEnabled,
      loginApp: loginApp,
      plugin: false
    }, /*#__PURE__*/React.createElement(LoginAppWrapper, null, children)));
  }
  return /*#__PURE__*/React.createElement(ErrorBoundary, {
    plugin: plugin,
    fullscreen: true,
    onRetry: checkForSWUpdateAndReload
  }, /*#__PURE__*/React.createElement(OfflineInterfaceProvider, null, /*#__PURE__*/React.createElement(PWALoadingBoundary, null, /*#__PURE__*/React.createElement(ServerVersionProvider, {
    appName: appName,
    appVersion: appVersion,
    url: url,
    apiVersion: apiVersion,
    pwaEnabled: pwaEnabled,
    plugin: plugin,
    parentAlertsAdd: parentAlertsAdd,
    showAlertsInPlugin: showAlertsInPlugin
  }, /*#__PURE__*/React.createElement(AppWrapper, {
    plugin: plugin,
    onPluginError: onPluginError,
    clearPluginError: clearPluginError,
    direction: direction
  }, children)))));
};
AppAdapter.propTypes = {
  appName: PropTypes.string.isRequired,
  appVersion: PropTypes.string.isRequired,
  apiVersion: PropTypes.number,
  children: PropTypes.element,
  clearPluginError: PropTypes.func,
  direction: PropTypes.oneOf(['ltr', 'rtl', 'auto']),
  loginApp: PropTypes.bool,
  parentAlertsAdd: PropTypes.func,
  plugin: PropTypes.bool,
  pwaEnabled: PropTypes.bool,
  showAlertsInPlugin: PropTypes.bool,
  url: PropTypes.string,
  onPluginError: PropTypes.func
};
export default AppAdapter;