"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomDataLink = void 0;
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class CustomDataLink {
  constructor(customData) {
    let {
      failOnMiss = true,
      loadForever = false
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _defineProperty(this, "failOnMiss", void 0);
    _defineProperty(this, "loadForever", void 0);
    _defineProperty(this, "data", void 0);
    this.data = customData;
    this.failOnMiss = failOnMiss;
    this.loadForever = loadForever;
  }
  async executeResourceQuery(type, query, options) {
    if (this.loadForever) {
      return new Promise(() => undefined);
    }
    const customResource = this.data[query.resource];
    if (customResource === undefined) {
      if (this.failOnMiss) {
        throw new Error(`No data provided for resource type ${query.resource}!`);
      }
      return Promise.resolve(null);
    }
    switch (typeof customResource) {
      case 'string':
      case 'number':
      case 'boolean':
      case 'object':
        return customResource;
      case 'function':
        {
          const result = await customResource(type, query, options);
          if (typeof result === 'undefined' && this.failOnMiss) {
            throw new Error(`The custom function for resource ${query.resource} must always return a value but returned ${result}`);
          }
          return result || null;
        }
    }
  }
}
exports.CustomDataLink = CustomDataLink;