"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RestAPILink = void 0;
var _fetchData = require("./RestAPILink/fetchData");
var _path = require("./RestAPILink/path");
var _queryToRequestOptions = require("./RestAPILink/queryToRequestOptions");
var _queryToResourcePath = require("./RestAPILink/queryToResourcePath");
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class RestAPILink {
  constructor(config) {
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "versionedApiPath", void 0);
    _defineProperty(this, "unversionedApiPath", void 0);
    this.config = config;
    this.versionedApiPath = (0, _path.joinPath)('api', String(config.apiVersion));
    this.unversionedApiPath = (0, _path.joinPath)('api');
  }
  fetch(path, options) {
    return (0, _fetchData.fetchData)((0, _path.joinPath)(this.config.baseUrl, path), options);
  }
  executeResourceQuery(type, query, _ref) {
    let {
      signal
    } = _ref;
    return this.fetch((0, _queryToResourcePath.queryToResourcePath)(this, query, type), (0, _queryToRequestOptions.queryToRequestOptions)(type, query, signal));
  }
}
exports.RestAPILink = RestAPILink;