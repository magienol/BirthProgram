"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requestHeadersForContentType = exports.requestContentType = exports.requestBodyForContentType = void 0;
var multipartFormDataMatchers = _interopRequireWildcard(require("./multipartFormDataMatchers"));
var textPlainMatchers = _interopRequireWildcard(require("./textPlainMatchers"));
var xWwwFormUrlencodedMatchers = _interopRequireWildcard(require("./xWwwFormUrlencodedMatchers"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const resourceExpectsTextPlain = (type, query) => Object.values(textPlainMatchers).some(textPlainMatcher => textPlainMatcher(type, query));
const resourceExpectsMultipartFormData = (type, query) => Object.values(multipartFormDataMatchers).some(multipartFormDataMatcher => multipartFormDataMatcher(type, query));
const resourceExpectsXWwwFormUrlencoded = (type, query) => Object.values(xWwwFormUrlencodedMatchers).some(xWwwFormUrlencodedMatcher => xWwwFormUrlencodedMatcher(type, query));
const convertData = (data, initialValue) => {
  const dataEntries = Object.entries(data);
  if (dataEntries.length === 0) {
    throw new Error(`Could not convert data to ${initialValue.constructor.name}: object does not have own enumerable string-keyed properties`);
  }
  return dataEntries.reduce((convertedData, _ref) => {
    let [key, value] = _ref;
    convertedData.append(key, value);
    return convertedData;
  }, initialValue);
};
const requestContentType = (type, query) => {
  if (!query.data) {
    return null;
  }
  if (type === 'json-patch') {
    return 'application/json-patch+json';
  }
  if (resourceExpectsTextPlain(type, query)) {
    return 'text/plain';
  }
  if (resourceExpectsMultipartFormData(type, query)) {
    return 'multipart/form-data';
  }
  if (resourceExpectsXWwwFormUrlencoded(type, query)) {
    return 'application/x-www-form-urlencoded';
  }
  return 'application/json';
};
exports.requestContentType = requestContentType;
const requestHeadersForContentType = contentType => {
  /*
   * Explicitely setting Content-Type to 'multipart/form-data' produces
   * a "multipart boundary not found" error. By not setting a Content-Type
   * the browser will correctly set it for us and also apply multipart
   * boundaries if the request body is an instance of FormData
   * See https://stackoverflow.com/a/39281156/1143502
   */
  if (!contentType || contentType === 'multipart/form-data') {
    return undefined;
  }
  return {
    'Content-Type': contentType
  };
};
exports.requestHeadersForContentType = requestHeadersForContentType;
const requestBodyForContentType = (contentType, _ref2) => {
  let {
    data
  } = _ref2;
  if (typeof data === 'undefined') {
    return undefined;
  }
  if (contentType === 'application/json' || contentType === 'application/json-patch+json') {
    return JSON.stringify(data);
  }
  if (contentType === 'multipart/form-data') {
    return convertData(data, new FormData());
  }
  if (contentType === 'application/x-www-form-urlencoded') {
    return convertData(data, new URLSearchParams());
  }

  // 'text/plain'
  return data;
};
exports.requestBodyForContentType = requestBodyForContentType;