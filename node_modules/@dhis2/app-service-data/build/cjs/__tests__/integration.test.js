"use strict";

var _react = require("@testing-library/react");
var React = _interopRequireWildcard(require("react"));
var _react3 = require("../react");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
describe('<DataQuery />', () => {
  it('should render without failing', async () => {
    const data = {
      answer: 42
    };
    const wrapper = _ref => {
      let {
        children
      } = _ref;
      return /*#__PURE__*/React.createElement(_react3.CustomDataProvider, {
        data: data
      }, children);
    };
    const renderFunction = jest.fn(() => null);
    (0, _react.render)(/*#__PURE__*/React.createElement(_react3.DataQuery, {
      query: {
        answer: {
          resource: 'answer'
        }
      }
    }, renderFunction), {
      wrapper
    });
    expect(renderFunction).toHaveBeenCalledTimes(1);
    expect(renderFunction).toHaveBeenLastCalledWith(expect.objectContaining({
      called: true,
      loading: true
    }));
    await (0, _react.waitFor)(() => {
      expect(renderFunction).toHaveBeenCalledTimes(2);
      expect(renderFunction).toHaveBeenLastCalledWith(expect.objectContaining({
        called: true,
        loading: false,
        data
      }));
    });
  });
  it('should render an error', async () => {
    const expectedError = new Error('Something went wrong');
    const data = {
      test: () => {
        throw expectedError;
      }
    };
    const wrapper = _ref2 => {
      let {
        children
      } = _ref2;
      return /*#__PURE__*/React.createElement(_react3.CustomDataProvider, {
        data: data
      }, children);
    };
    const renderFunction = jest.fn(() => null);
    (0, _react.render)(/*#__PURE__*/React.createElement(_react3.DataQuery, {
      query: {
        test: {
          resource: 'test'
        }
      }
    }, renderFunction), {
      wrapper
    });
    expect(renderFunction).toHaveBeenCalledTimes(1);
    expect(renderFunction).toHaveBeenLastCalledWith(expect.objectContaining({
      called: true,
      loading: true
    }));
    await (0, _react.waitFor)(() => {
      expect(renderFunction).toHaveBeenCalledTimes(2);
      expect(renderFunction).toHaveBeenLastCalledWith(expect.objectContaining({
        called: true,
        loading: false,
        error: expectedError
      }));
    });
  });
});