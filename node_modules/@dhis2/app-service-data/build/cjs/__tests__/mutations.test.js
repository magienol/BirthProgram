"use strict";

var _react = require("@testing-library/react");
var React = _interopRequireWildcard(require("react"));
var _react3 = require("../react");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
describe('<DataMutation />', () => {
  it('should render without failing', async () => {
    const endpointSpy = jest.fn(() => Promise.resolve(42));
    const mutation = {
      resource: 'answer',
      type: 'create',
      data: {
        question: '?'
      }
    };
    const data = {
      answer: endpointSpy
    };
    const wrapper = _ref => {
      let {
        children
      } = _ref;
      return /*#__PURE__*/React.createElement(_react3.CustomDataProvider, {
        data: data
      }, children);
    };
    const renderSpy = jest.fn(() => null);
    (0, _react.render)(/*#__PURE__*/React.createElement(_react3.DataMutation, {
      mutation: mutation
    }, renderSpy), {
      wrapper
    });
    expect(endpointSpy).toHaveBeenCalledTimes(0);
    expect(renderSpy).toHaveBeenCalledTimes(1);
    expect(renderSpy).toHaveBeenLastCalledWith([expect.any(Function), expect.objectContaining({
      called: false,
      loading: false,
      engine: expect.any(Object)
    })]);
    await (0, _react.act)(async () => {
      const firstRenderSpyCall = renderSpy.mock.calls[0];
      const firstRenderSpyArgument = firstRenderSpyCall[0];
      const [mutate] = firstRenderSpyArgument;
      await mutate();
    });
    (0, _react.waitFor)(() => {
      expect(endpointSpy).toHaveBeenCalledTimes(1);
      expect(renderSpy).toHaveBeenCalledTimes(2);
      expect(renderSpy).toHaveBeenLastCalledWith([expect.any(Function), expect.objectContaining({
        called: true,
        loading: true,
        engine: expect.any(Object)
      })]);
    });
    (0, _react.waitFor)(() => {
      expect(endpointSpy).toHaveBeenCalledTimes(1);
      expect(renderSpy).toHaveBeenCalledTimes(3);
      expect(renderSpy).toHaveBeenLastCalledWith([expect.any(Function), expect.objectContaining({
        called: true,
        loading: false,
        data: {
          answer: 42
        },
        engine: expect.any(Object)
      })]);
    });
  });
});