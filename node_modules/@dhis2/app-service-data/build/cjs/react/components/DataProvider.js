"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryClientOptions = exports.DataProvider = void 0;
var _appServiceConfig = require("@dhis2/app-service-config");
var _reactQuery = require("@tanstack/react-query");
var _react = _interopRequireDefault(require("react"));
var _engine = require("../../engine");
var _links = require("../../links");
var _DataContext = require("../context/DataContext");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/* eslint-disable react/no-unused-prop-types */

const queryClientOptions = exports.queryClientOptions = {
  defaultOptions: {
    queries: {
      // Disable automatic error retries
      retry: false,
      // Retry on mount if query has errored
      retryOnMount: true,
      // Refetch on mount if data is stale
      refetchOnMount: true,
      // Don't refetch when the window regains focus
      refetchOnWindowFocus: false,
      // Don't refetch after connection issues
      refetchOnReconnect: false,
      // RQv4 uses 'online' as the default, which pauses queries without network connection.
      // 'always' reestablishes behavior from v3, and lets requests fire when offline
      // https://tanstack.com/query/latest/docs/framework/react/guides/network-mode
      networkMode: 'always'
    }
  }
};
const queryClient = new _reactQuery.QueryClient(queryClientOptions);
const DataProvider = props => {
  const config = {
    ...(0, _appServiceConfig.useConfig)(),
    ...props
  };
  const link = new _links.RestAPILink(config);
  const engine = new _engine.DataEngine(link);
  const context = {
    engine
  };
  return /*#__PURE__*/_react.default.createElement(_reactQuery.QueryClientProvider, {
    client: queryClient
  }, /*#__PURE__*/_react.default.createElement(_DataContext.DataContext.Provider, {
    value: context
  }, props.children));
};
exports.DataProvider = DataProvider;