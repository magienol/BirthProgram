"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDataQuery = void 0;
var _reactQuery = require("@tanstack/react-query");
var _react = require("react");
var _mergeAndCompareVariables = require("./mergeAndCompareVariables");
var _useDataEngine = require("./useDataEngine");
var _useStaticInput = require("./useStaticInput");
const useDataQuery = function (query) {
  let {
    onComplete: userOnSuccess,
    onError: userOnError,
    variables: initialVariables = {},
    lazy: initialLazy = false
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const [staticQuery] = (0, _useStaticInput.useStaticInput)(query, {
    warn: true,
    name: 'query'
  });
  const [variablesUpdateCount, setVariablesUpdateCount] = (0, _react.useState)(0);
  const queryState = (0, _react.useRef)({
    variables: initialVariables,
    variablesHash: undefined,
    enabled: !initialLazy,
    refetchCallback: undefined
  });

  /**
   * Display current query state and refetch count in React DevTools
   */

  (0, _react.useDebugValue)({
    variablesUpdateCount,
    enabled: queryState.current.enabled,
    variables: queryState.current.variables
  }, debugValue => JSON.stringify(debugValue));

  /**
   * User callbacks and refetch handling
   */

  const onSuccess = data => {
    var _queryState$current$r, _queryState$current;
    (_queryState$current$r = (_queryState$current = queryState.current).refetchCallback) === null || _queryState$current$r === void 0 ? void 0 : _queryState$current$r.call(_queryState$current, data);
    queryState.current.refetchCallback = undefined;
    if (userOnSuccess) {
      userOnSuccess(data);
    }
  };
  const onError = error => {
    // If we'd want to reject on errors we'd call the cb with the error here
    queryState.current.refetchCallback = undefined;
    if (userOnError) {
      userOnError(error);
    }
  };

  /**
   * Setting up react-query
   */

  const engine = (0, _useDataEngine.useDataEngine)();
  const queryKey = [staticQuery, queryState.current.variables];
  const queryFn = () => engine.query(staticQuery, {
    variables: queryState.current.variables
  });
  const {
    status,
    fetchStatus,
    error,
    data,
    refetch: queryRefetch
  } = (0, _reactQuery.useQuery)({
    queryKey,
    queryFn,
    enabled: queryState.current.enabled,
    onSuccess,
    onError
  });

  /**
   * Refetch allows a user to update the variables or just
   * trigger a refetch of the query with the current variables.
   *
   * We're using useCallback to make the identity of the function
   * as stable as possible, so that it won't trigger excessive
   * rerenders when used for side-effects.
   */

  const refetch = (0, _react.useCallback)(newVariables => {
    const {
      identical,
      mergedVariables,
      mergedVariablesHash
    } = (0, _mergeAndCompareVariables.mergeAndCompareVariables)(queryState.current.variables, newVariables, queryState.current.variablesHash);

    /**
     * If there are no updates that will trigger an automatic refetch
     * we'll need to call react-query's refetch directly
     */
    if (queryState.current.enabled && identical) {
      return queryRefetch({
        throwOnError: false
      }).then(_ref => {
        let {
          data
        } = _ref;
        return data;
      });
    }
    queryState.current.variables = mergedVariables;
    queryState.current.variablesHash = mergedVariablesHash;
    queryState.current.enabled = true;

    // This promise does not currently reject on errors
    const refetchPromise = new Promise(resolve => {
      queryState.current.refetchCallback = data => {
        resolve(data);
      };
    });

    // Trigger a react-query refetch by incrementing variablesUpdateCount state
    setVariablesUpdateCount(prevCount => prevCount + 1);
    return refetchPromise;
  }, [queryRefetch]);

  /**
   * react-query returns null or an error, but we return undefined
   * or an error, so this ensures consistency with the other types.
   */
  const ourError = error || undefined;
  return {
    engine,
    // A query has not been called if it is lazy (fetchStatus = 'idle') and no initial data is available (status = 'loading').
    // https://tanstack.com/query/v4/docs/framework/react/guides/queries
    called: !(status === 'loading' && fetchStatus === 'idle'),
    // 'loading' should only be true when actively fetching (fetchStatus = 'fetching') while there is no data yet (status = 'loading').
    // If there is already data for the query, then 'loading' will not become 'true' when refetching, so the previous data can still be
    // displayed while new data is fetched in the background
    loading: fetchStatus === 'fetching' && status === 'loading',
    // 'fetching' reflects the fetching behavior behind the scenes
    fetching: fetchStatus === 'fetching',
    error: ourError,
    data,
    refetch
  };
};
exports.useDataQuery = useDataQuery;