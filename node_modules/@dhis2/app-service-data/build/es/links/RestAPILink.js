function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { fetchData } from './RestAPILink/fetchData';
import { joinPath } from './RestAPILink/path';
import { queryToRequestOptions } from './RestAPILink/queryToRequestOptions';
import { queryToResourcePath } from './RestAPILink/queryToResourcePath';
export class RestAPILink {
  constructor(config) {
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "versionedApiPath", void 0);
    _defineProperty(this, "unversionedApiPath", void 0);
    this.config = config;
    this.versionedApiPath = joinPath('api', String(config.apiVersion));
    this.unversionedApiPath = joinPath('api');
  }
  fetch(path, options) {
    return fetchData(joinPath(this.config.baseUrl, path), options);
  }
  executeResourceQuery(type, query, _ref) {
    let {
      signal
    } = _ref;
    return this.fetch(queryToResourcePath(this, query, type), queryToRequestOptions(type, query, signal));
  }
}