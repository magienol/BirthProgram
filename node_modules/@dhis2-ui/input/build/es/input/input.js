import _JSXStyle from "styled-jsx/style";
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { theme, colors, spacers, sharedPropTypes } from '@dhis2/ui-constants';
import { IconCross16 } from '@dhis2/ui-icons';
import { StatusIcon } from '@dhis2-ui/status-icon';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import { inputTypes } from './inputTypes.js';
const styles = [`.input.jsx-4253951613{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:relative;gap:${spacers.dp8};}`, `input.jsx-4253951613{box-sizing:border-box;font-size:14px;line-height:16px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;color:${colors.grey900};background-color:white;padding:11px 12px;max-height:40px;outline:0;border:1px solid ${colors.grey500};border-radius:3px;box-shadow:inset 0 0 1px 0 rgba(48,54,60,0.1);text-overflow:ellipsis;}`, "input.dense.jsx-4253951613{max-height:32px;padding:7px 8px;}", `input.jsx-4253951613:focus{outline:none;box-shadow:inset 0 0 0 2px ${theme.focus};border-color:${theme.focus};}`, `input.jsx-4253951613::-webkit-input-placeholder{color:${colors.grey600};opacity:1;}`, `input.jsx-4253951613::-moz-placeholder{color:${colors.grey600};opacity:1;}`, `input.jsx-4253951613:-ms-input-placeholder{color:${colors.grey600};opacity:1;}`, `input.jsx-4253951613::placeholder{color:${colors.grey600};opacity:1;}`, "input[type='date'].jsx-4253951613::-webkit-inner-spin-button,input[type='date'].jsx-4253951613::-webkit-calendar-picker-indicator,input[type='time'].jsx-4253951613::-webkit-inner-spin-button,input[type='time'].jsx-4253951613::-webkit-calendar-picker-indicator,input[type='datetime-local'].jsx-4253951613::-webkit-inner-spin-button,input[type='datetime-local'].jsx-4253951613::-webkit-calendar-picker-indicator{height:14px;padding-top:1px;padding-bottom:1px;}", "input[type='date'].jsx-4253951613::-webkit-datetime-edit-fields-wrapper,input[type='datetime-local'].jsx-4253951613::-webkit-datetime-edit-fields-wrapper,input[type='time'].jsx-4253951613::-webkit-datetime-edit-fields-wrapper{padding:0;}", `input.warning.jsx-4253951613{border-color:${theme.warning};}`, `input.error.jsx-4253951613{border-color:${theme.error};}`, `input.read-only.jsx-4253951613{background-color:${colors.grey050};border-color:${colors.grey300};box-shadow:none;cursor:text;}`, `input.disabled.jsx-4253951613{background-color:${colors.grey100};border-color:${colors.grey500};color:${theme.disabled};cursor:not-allowed;}`];
styles.__hash = "4253951613";
export class Input extends Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "inputRef", /*#__PURE__*/React.createRef());
    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(e), e);
      }
    });
    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(e), e);
      }
    });
    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(e), e);
      }
    });
    _defineProperty(this, "handleKeyDown", e => {
      if (this.props.onKeyDown) {
        this.props.onKeyDown(this.createHandlerPayload(e), e);
      }
    });
    _defineProperty(this, "handleClear", () => {
      if (this.props.onChange) {
        this.props.onChange({
          value: '',
          name: this.props.name
        });
      }
    });
  }
  componentDidMount() {
    if (this.props.initialFocus) {
      this.inputRef.current.focus();
    }
  }
  createHandlerPayload(e) {
    return {
      value: e.target.value,
      name: this.props.name
    };
  }
  render() {
    const {
      role,
      className,
      type = 'text',
      dense,
      disabled,
      readOnly,
      placeholder,
      name,
      valid,
      error,
      warning,
      loading,
      value,
      tabIndex,
      max,
      min,
      step,
      autoComplete,
      dataTest = 'dhis2-uicore-input',
      clearable,
      prefixIcon,
      width
    } = this.props;
    return /*#__PURE__*/React.createElement("div", {
      "data-test": dataTest,
      className: `jsx-${styles.__hash}` + " " + _JSXStyle.dynamic([["3324859945", [width ? width : `100%`, colors.grey600, colors.grey500]]]) + " " + (cx('input', className, {
        'input-prefix-icon': prefixIcon
      }, {
        'input-clearable': clearable
      }) || "")
    }, prefixIcon && /*#__PURE__*/React.createElement("span", {
      className: `jsx-${styles.__hash}` + " " + _JSXStyle.dynamic([["3324859945", [width ? width : `100%`, colors.grey600, colors.grey500]]]) + " " + "prefix"
    }, prefixIcon), /*#__PURE__*/React.createElement("input", {
      role: role,
      id: name,
      name: name,
      placeholder: placeholder,
      ref: this.inputRef,
      type: type,
      value: value,
      max: max,
      min: min,
      step: step,
      disabled: disabled,
      readOnly: readOnly,
      tabIndex: tabIndex,
      autoComplete: autoComplete,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onChange: this.handleChange,
      onKeyDown: this.handleKeyDown,
      className: `jsx-${styles.__hash}` + " " + _JSXStyle.dynamic([["3324859945", [width ? width : `100%`, colors.grey600, colors.grey500]]]) + " " + (cx({
        dense,
        disabled,
        error,
        valid,
        warning,
        'read-only': readOnly
      }) || "")
    }), clearable && value !== null && value !== void 0 && value.length ? /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: this.handleClear,
      className: `jsx-${styles.__hash}` + " " + _JSXStyle.dynamic([["3324859945", [width ? width : `100%`, colors.grey600, colors.grey500]]]) + " " + "clear-button"
    }, /*#__PURE__*/React.createElement(IconCross16, {
      color: colors.white
    })) : null, /*#__PURE__*/React.createElement(StatusIcon, {
      error: error,
      valid: valid,
      loading: loading,
      warning: warning
    }), /*#__PURE__*/React.createElement(_JSXStyle, {
      id: styles.__hash
    }, styles), /*#__PURE__*/React.createElement(_JSXStyle, {
      id: "3324859945",
      dynamic: [width ? width : `100%`, colors.grey600, colors.grey500]
    }, [`.input.__jsx-style-dynamic-selector{width:${width ? width : `100%`};}`, "input.__jsx-style-dynamic-selector{width:100%;}", ".input-prefix-icon.__jsx-style-dynamic-selector input.__jsx-style-dynamic-selector{padding-inline-start:30px;}", ".input-clearable.__jsx-style-dynamic-selector input.__jsx-style-dynamic-selector{padding-inline-end:30px;}", `.prefix.__jsx-style-dynamic-selector{position:absolute;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;pointer-events:none;left:10px;padding:0;color:${colors.grey600};}`, `.clear-button.__jsx-style-dynamic-selector{position:absolute;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;border:none;cursor:pointer;height:16px;width:16px;border-radius:50%;right:10px;background:${colors.grey500};padding:1px;}`]));
  }
}
_defineProperty(Input, "defaultProps", {
  type: 'text',
  dataTest: 'dhis2-uicore-input'
});
Input.propTypes = {
  /** The [native `autocomplete` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete) */
  autoComplete: PropTypes.string,
  className: PropTypes.string,
  /** Makes the input field clearable */
  clearable: PropTypes.bool,
  dataTest: PropTypes.string,
  /** Makes the input smaller */
  dense: PropTypes.bool,
  /** Disables the input */
  disabled: PropTypes.bool,
  /** Applies 'error' appearance for validation feedback. Mutually exclusive with `valid` and `warning` props */
  error: sharedPropTypes.statusPropType,
  /** The input grabs initial focus on the page */
  initialFocus: PropTypes.bool,
  /** Adds a loading indicator beside the input */
  loading: PropTypes.bool,
  /** The [native `max` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max), for use when `type` is `'number'` */
  max: PropTypes.string,
  /** The [native `min` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min), for use when `type` is `'number'` */
  min: PropTypes.string,
  /** Name associated with the input. Passed to event handler callbacks in object */
  name: PropTypes.string,
  /** Placeholder text for the input */
  placeholder: PropTypes.string,
  /** Add prefix icon */
  prefixIcon: PropTypes.element,
  /** Makes the input read-only */
  readOnly: PropTypes.bool,
  /** Sets a role attribute on the input */
  role: PropTypes.string,
  /** The [native `step` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step), for use when `type` is `'number'` */
  step: PropTypes.string,
  tabIndex: PropTypes.string,
  /** The native input `type` attribute */
  type: PropTypes.oneOf(inputTypes),
  /** Applies 'valid' appearance for validation feedback. Mutually exclusive with `error` and `warning` props */
  valid: sharedPropTypes.statusPropType,
  /** Value in the input. Can be used to control the component (recommended). Passed to event handler callbacks in object */
  value: PropTypes.string,
  /** Applies 'warning' appearance for validation feedback. Mutually exclusive with `valid` and `error` props */
  warning: sharedPropTypes.statusPropType,
  /** Defines the width of the input. Can be any valid CSS measurement */
  width: PropTypes.string,
  /** Called with signature `({ name: string, value: string }, event)` */
  onBlur: PropTypes.func,
  /** Called with signature `({ name: string, value: string }, event)` */
  onChange: PropTypes.func,
  /** Called with signature `({ name: string, value: string }, event)` */
  onFocus: PropTypes.func,
  /** Called with signature `({ name: string, value: string }, event)` */
  onKeyDown: PropTypes.func
};