import _JSXStyle from "styled-jsx/style";
import { colors, spacers } from '@dhis2/ui-constants';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { useRef } from 'react';
const DOUBLE_CLICK_MAX_DELAY = 500;
export const TransferOption = _ref => {
  let {
    className,
    disabled,
    dataTest = 'dhis2-uicore-transferoption',
    highlighted,
    onClick,
    onDoubleClick,
    label,
    value
  } = _ref;
  const doubleClickTimeout = useRef(null);
  return /*#__PURE__*/React.createElement("div", {
    "data-test": dataTest,
    onClick: event => {
      if (disabled) {
        return;
      }
      if (doubleClickTimeout.current) {
        clearTimeout(doubleClickTimeout.current);
        doubleClickTimeout.current = null;
        onDoubleClick({
          value
        }, event);
      } else {
        doubleClickTimeout.current = setTimeout(() => {
          clearTimeout(doubleClickTimeout.current);
          doubleClickTimeout.current = null;
        }, DOUBLE_CLICK_MAX_DELAY);
        onClick({
          value
        }, event);
      }
    },
    "data-value": value,
    className: _JSXStyle.dynamic([["4053649642", [colors.grey900, colors.grey200, colors.teal700, colors.white, colors.grey600, spacers.dp4, spacers.dp4]]]) + " " + (cx(className, {
      highlighted,
      disabled
    }) || "")
  }, label, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "4053649642",
    dynamic: [colors.grey900, colors.grey200, colors.teal700, colors.white, colors.grey600, spacers.dp4, spacers.dp4]
  }, [`div.__jsx-style-dynamic-selector{font-size:14px;line-height:16px;padding:4px 8px;color:${colors.grey900};-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}`, `div.__jsx-style-dynamic-selector:hover{background:${colors.grey200};}`, `div.highlighted.__jsx-style-dynamic-selector{background:${colors.teal700};color:${colors.white};}`, `div.disabled.__jsx-style-dynamic-selector{color:${colors.grey600};cursor:not-allowed;}`, `div.__jsx-style-dynamic-selector:first-child{margin-block-start:${spacers.dp4};}`, `div.__jsx-style-dynamic-selector:last-child{margin-block-end:${spacers.dp4};}`]));
};
TransferOption.propTypes = {
  label: PropTypes.node.isRequired,
  value: PropTypes.string.isRequired,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  disabled: PropTypes.bool,
  highlighted: PropTypes.bool,
  onClick: PropTypes.func,
  onDoubleClick: PropTypes.func
};