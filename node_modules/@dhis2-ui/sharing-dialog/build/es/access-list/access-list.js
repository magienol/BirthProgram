import _JSXStyle from "styled-jsx/style";
import { colors } from '@dhis2/ui-constants';
import PropTypes from 'prop-types';
import React from 'react';
import { SHARE_TARGET_PUBLIC, SHARE_TARGET_GROUP, SHARE_TARGET_USER, ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT } from '../constants.js';
import i18n from '../locales/index.js';
import { Title } from '../text/index.js';
import { ListItem } from './list-item.js';
export const AccessList = _ref => {
  let {
    onChange,
    onRemove,
    publicAccess,
    allowPublicAccess,
    users,
    groups,
    dataSharing
  } = _ref;
  const accessOptions = [ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT];
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Title, null, i18n.t('Users and groups that currently have access')), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["3415079234", [colors.grey200, colors.grey900]]]) + " " + "header"
  }, /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["3415079234", [colors.grey200, colors.grey900]]]) + " " + ((dataSharing ? 'header-start-column-data' : 'header-start-column-metadata') || "")
  }, i18n.t('User / Group')), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["3415079234", [colors.grey200, colors.grey900]]]) + " " + ((dataSharing ? 'header-end-column-data' : 'header-end-column-metadata') || "")
  }, /*#__PURE__*/React.createElement("span", {
    className: _JSXStyle.dynamic([["3415079234", [colors.grey200, colors.grey900]]]) + " " + "hea"
  }, i18n.t('Access level')))), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["3415079234", [colors.grey200, colors.grey900]]]) + " " + "list"
  }, /*#__PURE__*/React.createElement(ListItem, {
    name: i18n.t('All users'),
    target: SHARE_TARGET_PUBLIC,
    access: publicAccess,
    accessOptions: accessOptions,
    disabled: !allowPublicAccess,
    onChange: newAccess => onChange({
      type: 'public',
      access: newAccess
    }),
    dataSharing: dataSharing,
    allUsersItem: true
  }), groups.map(_ref2 => {
    let {
      id,
      name,
      access
    } = _ref2;
    return /*#__PURE__*/React.createElement(ListItem, {
      key: id,
      name: name,
      target: SHARE_TARGET_GROUP,
      access: access,
      accessOptions: accessOptions,
      onChange: newAccess => onChange({
        type: 'group',
        id,
        access: newAccess
      }),
      onRemove: () => onRemove({
        type: 'group',
        id
      }),
      dataSharing: dataSharing
    });
  }), users.map(_ref3 => {
    let {
      id,
      name,
      access
    } = _ref3;
    return access && /*#__PURE__*/React.createElement(ListItem, {
      key: id,
      id: id,
      name: name,
      target: SHARE_TARGET_USER,
      access: access,
      accessOptions: accessOptions,
      onChange: newAccess => onChange({
        type: 'user',
        id,
        access: newAccess
      }),
      onRemove: () => onRemove({
        type: 'user',
        id
      }),
      dataSharing: dataSharing
    });
  })), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3415079234",
    dynamic: [colors.grey200, colors.grey900]
  }, [`.header.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;padding:10px 8px;margin:0 0 8px 0;background-color:${colors.grey200};color:${colors.grey900};font-size:13px;}`, ".header-start-column-metadata.__jsx-style-dynamic-selector{width:65%;}", ".header-end-column-metadata.__jsx-style-dynamic-selector{margin-inline-start:auto;width:35%;}", ".header-start-column-data.__jsx-style-dynamic-selector{width:35%;}", ".header-end-column-data.__jsx-style-dynamic-selector{margin-inline-start:auto;width:65%;}", ".hea.__jsx-style-dynamic-selector{display:inline-block;margin-inline-start:8px;}", ".list.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;overflow-y:auto;}"]));
};
AccessList.propTypes = {
  allowPublicAccess: PropTypes.bool.isRequired,
  dataSharing: PropTypes.bool.isRequired,
  groups: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired,
    access: PropTypes.shape({
      data: PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT]),
      metadata: PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT])
    })
  })).isRequired,
  publicAccess: PropTypes.shape({
    data: PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT]),
    metadata: PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT])
  }).isRequired,
  users: PropTypes.arrayOf(PropTypes.shape({
    access: PropTypes.shape({
      data: PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT]),
      metadata: PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT])
    }).isRequired,
    id: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired
  })).isRequired,
  onChange: PropTypes.func.isRequired,
  onRemove: PropTypes.func.isRequired
};