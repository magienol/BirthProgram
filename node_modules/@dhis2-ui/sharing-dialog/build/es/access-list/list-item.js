import _JSXStyle from "styled-jsx/style";
import { useDhis2ConnectionStatus } from '@dhis2/app-runtime';
import { colors } from '@dhis2/ui-constants';
import { Divider } from '@dhis2-ui/divider';
import { SingleSelectField, SingleSelectOption } from '@dhis2-ui/select';
import PropTypes from 'prop-types';
import React, { useContext } from 'react';
import { SHARE_TARGET_PUBLIC, SHARE_TARGET_GROUP, SHARE_TARGET_USER, ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT } from '../constants.js';
import { DestructiveSelectOption } from '../destructive-select-option/index.js';
import { FetchingContext } from '../fetching-context/index.js';
import { isRemovableTarget } from '../helpers/index.js';
import i18n from '../locales/index.js';
import { ListItemContext } from './list-item-context.js';
import { ListItemIcon } from './list-item-icon.js';
const isRemoveEnabled = _ref => {
  let {
    dataSharing,
    accessOtherField
  } = _ref;
  if (!dataSharing) {
    return true;
  }
  return accessOtherField === ACCESS_NONE;
};
export const ListItem = _ref2 => {
  let {
    name,
    id,
    target,
    access,
    accessOptions,
    disabled,
    onChange,
    onRemove,
    dataSharing,
    allUsersItem = false
  } = _ref2;
  const isFetching = useContext(FetchingContext);
  const {
    isDisconnected: offline
  } = useDhis2ConnectionStatus();
  const valueToLabel = {
    ACCESS_NONE: i18n.t('No access'),
    ACCESS_VIEW_ONLY: i18n.t('View only'),
    ACCESS_VIEW_AND_EDIT: i18n.t('View and edit')
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["650548845", [colors.grey900]]]) + " " + "wrapper"
  }, /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["650548845", [colors.grey900]]]) + " " + ((dataSharing ? 'detailsWithData' : 'detailsMetadata') || "")
  }, /*#__PURE__*/React.createElement(ListItemIcon, {
    target: target,
    name: name
  }), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["650548845", [colors.grey900]]]) + " " + "details-text"
  }, /*#__PURE__*/React.createElement("p", {
    className: _JSXStyle.dynamic([["650548845", [colors.grey900]]]) + " " + "details-name"
  }, name), /*#__PURE__*/React.createElement(ListItemContext, {
    target: target,
    id: id
  }))), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["650548845", [colors.grey900]]]) + " " + ((dataSharing ? 'selectWrapperWithData' : 'selectWrapperMetadata') || "")
  }, dataSharing && /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["650548845", [colors.grey900]]]) + " " + "select"
  }, /*#__PURE__*/React.createElement(SingleSelectField, {
    disabled: disabled || offline || isFetching,
    prefix: i18n.t('Data'),
    selected: access.data,
    helpText: offline ? i18n.t('Not available offline') : '',
    onChange: _ref3 => {
      let {
        selected
      } = _ref3;
      return onChange({
        ...access,
        data: selected
      });
    }
  }, accessOptions.map(value => /*#__PURE__*/React.createElement(SingleSelectOption, {
    key: value,
    label: valueToLabel[value],
    value: value,
    active: value === access.data
  })), isRemovableTarget(target) && isRemoveEnabled({
    accessOtherField: access.metadata,
    dataSharing
  }) && /*#__PURE__*/React.createElement(DestructiveSelectOption, {
    onClick: onRemove,
    label: i18n.t('Remove access')
  }))), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["650548845", [colors.grey900]]]) + " " + "select"
  }, /*#__PURE__*/React.createElement(SingleSelectField, {
    disabled: disabled || offline || isFetching,
    prefix: i18n.t('Metadata'),
    selected: access.metadata,
    helpText: offline ? i18n.t('Not available offline') : '',
    onChange: _ref4 => {
      let {
        selected
      } = _ref4;
      return onChange({
        ...access,
        metadata: selected
      });
    }
  }, accessOptions.map(value => /*#__PURE__*/React.createElement(SingleSelectOption, {
    key: value,
    label: valueToLabel[value],
    value: value,
    active: value === access.metadata,
    disabled: !allUsersItem && value === ACCESS_NONE && !dataSharing
  })), isRemovableTarget(target) && isRemoveEnabled({
    accessOtherField: access.data,
    dataSharing
  }) && /*#__PURE__*/React.createElement(DestructiveSelectOption, {
    onClick: onRemove,
    label: i18n.t('Remove access')
  }))))), /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "650548845",
    dynamic: [colors.grey900]
  }, [".wrapper.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;padding:4px 8px;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}", ".detailsMetadata.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:65%;}", ".detailsWithData.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:35%;}", ".details-text.__jsx-style-dynamic-selector{margin-inline-start:8px;}", `.details-name.__jsx-style-dynamic-selector{font-size:15px;font-weight:500;color:${colors.grey900};margin:0;padding:0;}`, ".selectWrapperMetadata.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:35%;}", ".selectWrapperWithData.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:65%;}", ".select.__jsx-style-dynamic-selector{margin-inline-start:8px;-webkit-flex:1;-ms-flex:1;flex:1;}"]));
};
ListItem.propTypes = {
  access: PropTypes.shape({
    data: PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT]),
    metadata: PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT])
  }).isRequired,
  accessOptions: PropTypes.arrayOf(PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT])).isRequired,
  dataSharing: PropTypes.bool.isRequired,
  name: PropTypes.string.isRequired,
  target: PropTypes.oneOf([SHARE_TARGET_PUBLIC, SHARE_TARGET_GROUP, SHARE_TARGET_USER]).isRequired,
  onChange: PropTypes.func.isRequired,
  allUsersItem: PropTypes.bool,
  disabled: PropTypes.bool,
  id: PropTypes.string,
  onRemove: PropTypes.func
};