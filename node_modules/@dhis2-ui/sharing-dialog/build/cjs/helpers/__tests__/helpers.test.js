"use strict";

var _constants = require("../../constants.js");
var _helpers = require("../helpers.js");
describe('helpers', () => {
  describe('convertAccessToConstantObject', () => {
    it('disallows access if the access string is undefined', () => {
      const NO_ACCESS_OBJECT = {
        data: _constants.ACCESS_NONE,
        metadata: _constants.ACCESS_NONE
      };
      expect((0, _helpers.convertAccessToConstantObject)()).toEqual(NO_ACCESS_OBJECT);
    });
    it('disallows access if the access string is invalid', () => {
      const NO_ACCESS_OBJECT = {
        data: _constants.ACCESS_NONE,
        metadata: _constants.ACCESS_NONE
      };
      expect((0, _helpers.convertAccessToConstantObject)('invalid-access-string')).toEqual(NO_ACCESS_OBJECT);
    });
    const cases = [['--------', {
      data: _constants.ACCESS_NONE,
      metadata: _constants.ACCESS_NONE
    }], ['r-------', {
      data: _constants.ACCESS_NONE,
      metadata: _constants.ACCESS_VIEW_ONLY
    }], ['r-r-----', {
      data: _constants.ACCESS_VIEW_ONLY,
      metadata: _constants.ACCESS_VIEW_ONLY
    }], ['rw------', {
      data: _constants.ACCESS_NONE,
      metadata: _constants.ACCESS_VIEW_AND_EDIT
    }], ['rwrw----', {
      data: _constants.ACCESS_VIEW_AND_EDIT,
      metadata: _constants.ACCESS_VIEW_AND_EDIT
    }]];
    it.each(cases)('parses the metadata portion of the access string correctly for %s', (accessString, accessConstant) => {
      expect((0, _helpers.convertAccessToConstantObject)(accessString)).toEqual(accessConstant);
    });
  });
  describe('convertConstantObjectToAccess', () => {
    it('returns the default access string if the access constant is not recognised', () => {
      const expected = '--------';
      expect((0, _helpers.convertConstantObjectToAccess)({
        data: 'NOT_RECOGNISED',
        metadata: 'NOT_RECOGNISED'
      })).toEqual(expected);
    });
    const cases = [[{
      data: _constants.ACCESS_NONE,
      metadata: _constants.ACCESS_NONE
    }, '--------'], [{
      data: _constants.ACCESS_NONE,
      metadata: _constants.ACCESS_VIEW_ONLY
    }, 'r-------'], [{
      data: _constants.ACCESS_NONE,
      metadata: _constants.ACCESS_VIEW_AND_EDIT
    }, 'rw------'], [{
      data: _constants.ACCESS_VIEW_ONLY,
      metadata: _constants.ACCESS_NONE
    }, '--r-----'], [{
      data: _constants.ACCESS_VIEW_AND_EDIT,
      metadata: _constants.ACCESS_VIEW_AND_EDIT
    }, 'rwrw----']];
    it.each(cases)('returns the correct metadata access string for %s', (accessConstant, accessString) => {
      expect((0, _helpers.convertConstantObjectToAccess)(accessConstant)).toEqual(accessString);
    });
  });
  describe('isRemovableTarget', () => {
    it('returns false for targets that should not be removable', () => {
      expect((0, _helpers.isRemovableTarget)(_constants.SHARE_TARGET_EXTERNAL)).toBe(false);
      expect((0, _helpers.isRemovableTarget)(_constants.SHARE_TARGET_PUBLIC)).toBe(false);
    });
    it('returns true for all other targets', () => {
      expect((0, _helpers.isRemovableTarget)('Does not exist')).toBe(true);
    });
  });
});