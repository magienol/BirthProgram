"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarProps = exports.Calendar = void 0;
var _multiCalendarDates = require("@dhis2/multi-calendar-dates");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _calendarContainer = require("./calendar-container.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const Calendar = _ref => {
  let {
    onDateSelect,
    calendar,
    date,
    dir,
    locale,
    numberingSystem,
    weekDayFormat = 'narrow',
    timeZone,
    width = '240px',
    cellSize = '32px',
    pastOnly
  } = _ref;
  const [selectedDateString, setSelectedDateString] = (0, _react.useState)(date);
  const languageDirection = (0, _multiCalendarDates.useResolvedDirection)(dir, locale);
  const options = {
    locale,
    calendar,
    timeZone,
    numberingSystem,
    weekDayFormat,
    pastOnly
  };
  const pickerResults = (0, _multiCalendarDates.useDatePicker)({
    onDateSelect: result => {
      const {
        calendarDateString
      } = result;
      setSelectedDateString(calendarDateString);
      onDateSelect(result);
    },
    date: selectedDateString,
    options
  });
  const calendarProps = (0, _react.useMemo)(() => {
    return {
      date,
      dir,
      locale,
      width,
      cellSize,
      // minDate,
      // maxDate,
      // validation, // todo: clarify how we use validation props (and format) in Calendar (not CalendarInput)
      // format,
      isValid: pickerResults.isValid,
      calendarWeekDays: pickerResults.calendarWeekDays,
      weekDayLabels: pickerResults.weekDayLabels,
      currMonth: pickerResults.currMonth,
      currYear: pickerResults.currYear,
      nextMonth: pickerResults.nextMonth,
      nextYear: pickerResults.nextYear,
      prevMonth: pickerResults.prevMonth,
      prevYear: pickerResults.prevYear,
      navigateToYear: pickerResults.navigateToYear,
      navigateToMonth: pickerResults.navigateToMonth,
      months: pickerResults.months,
      years: pickerResults.years,
      languageDirection
    };
  }, [cellSize, date, dir, locale, pickerResults, width, languageDirection]);
  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_calendarContainer.CalendarContainer, calendarProps));
};
exports.Calendar = Calendar;
const CalendarProps = exports.CalendarProps = {
  /** the calendar to use such gregory, ethiopic, nepali - full supported list here: https://github.com/dhis2/multi-calendar-dates/blob/main/src/constants/calendars.ts  */
  calendar: _propTypes.default.any.isRequired,
  /** Called with signature `(null)` \|\| `({ dateCalendarString: string, validation: { error: boolean, warning: boolean, validationText: string} })` with `dateCalendarString` being the stringified date in the specified calendar in the format `yyyy-MM-dd` */
  onDateSelect: _propTypes.default.func.isRequired,
  /** the size of a single cell in the table forming the calendar */
  cellSize: _propTypes.default.string,
  /** the currently selected date using an iso-like format YYYY-MM-DD, in the calendar system provided (not iso8601) */
  date: _propTypes.default.string,
  /** the direction of the library - internally the library will use rtl for rtl-languages but this can be overridden here for more control */
  dir: _propTypes.default.oneOf(['ltr', 'rtl']),
  /** any valid locale -  if none provided, the internal library will fallback to the user locale (more info here: https://github.com/dhis2/multi-calendar-dates/blob/main/src/hooks/internal/useResolvedLocaleOptions.ts#L15) */
  locale: _propTypes.default.string,
  /** numbering system to use - full list here https://github.com/dhis2/multi-calendar-dates/blob/main/src/constants/numberingSystems.ts */
  numberingSystem: _propTypes.default.string,
  /** When true, only shows years in the past (current year and earlier) */
  pastOnly: _propTypes.default.bool,
  /** the timeZone to use */
  timeZone: _propTypes.default.string,
  /** the format to display for the week day, i.e. Monday (long), Mon (short), M (narrow) */
  weekDayFormat: _propTypes.default.oneOf(['narrow', 'short', 'long']),
  /** the width of the calendar component */
  width: _propTypes.default.string
};
Calendar.propTypes = CalendarProps;