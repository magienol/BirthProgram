"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarWithClearButton = void 0;
exports.CalendarWithNonStrictValidation = CalendarWithNonStrictValidation;
exports.CalendarWithStrictValidation = CalendarWithStrictValidation;
exports.default = exports.NepaliWithNepali = exports.NepaliWithEnglish = exports.IslamicWithArabic = exports.GregorianWithEnglish = exports.GregorianWithArabic = exports.EthiopicWithEnglish = exports.EthiopicWithAmharic = void 0;
var _button = require("@dhis2-ui/button");
var _react = _interopRequireWildcard(require("react"));
var _reactFinalForm = require("react-final-form");
var _calendarInput = require("../calendar-input/calendar-input.js");
var _calendarStoryWrapper = require("./calendar-story-wrapper.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const subtitle = `[Experimental] Calendar Input is a wrapper around Calendar displaying an input that triggers the calendar`;
const description = `
Use a CalendarInput where there is a need to let the user input a date.

Note that it requires a parent, like [Box](../?path=/docs/layout-box--default), to define its size.

\`\`\`js
import { CalendarInput } from '@dhis2/ui'
\`\`\`
`;
var _default = exports.default = {
  title: 'CalendarInput',
  component: _calendarInput.CalendarInput,
  parameters: {
    componentSubtitle: subtitle,
    docs: {
      description: {
        component: description
      }
    }
  }
};
const buildCalendar = _ref => {
  let {
    date,
    locale,
    calendar
  } = _ref;
  return () => /*#__PURE__*/_react.default.createElement(_calendarStoryWrapper.CalendarStoryWrapper, {
    component: _calendarInput.CalendarInput,
    dir: "ltr",
    timeZone: "Africa/Khartoum",
    weekDayFormat: "short",
    date: date,
    locale: locale,
    calendar: calendar,
    onDateSelect: () => {}
  });
};
const EthiopicWithAmharic = exports.EthiopicWithAmharic = buildCalendar({
  calendar: 'ethiopic',
  locale: 'am-ET',
  date: '2014-02-03' // 13 Oct 2021
});
const EthiopicWithEnglish = exports.EthiopicWithEnglish = buildCalendar({
  calendar: 'ethiopian',
  // using "ethiopian" rather than the correct "ethiopic" to immitate DHIS2 calendar types
  locale: 'en-ET',
  date: '2014-02-03' // 13 Oct 2021
});
const NepaliWithNepali = exports.NepaliWithNepali = buildCalendar({
  calendar: 'nepali',
  locale: 'ne-NP',
  date: '2078-06-27' // 13 Oct 2021
});
const NepaliWithEnglish = exports.NepaliWithEnglish = buildCalendar({
  calendar: 'nepali',
  locale: 'en-NP',
  date: '2078-06-27' // 13 Oct 2021
});
const GregorianWithEnglish = exports.GregorianWithEnglish = buildCalendar({
  calendar: 'gregorian',
  locale: 'en-CA',
  date: '2021-10-13'
});
const GregorianWithArabic = exports.GregorianWithArabic = buildCalendar({
  calendar: 'gregorian',
  locale: 'ar-SD',
  date: '2021-10-13'
});
const IslamicWithArabic = () => {
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      direction: 'rtl'
    }
  }, /*#__PURE__*/_react.default.createElement(_calendarStoryWrapper.CalendarStoryWrapper, {
    component: _calendarInput.CalendarInput,
    dir: "rtl",
    timeZone: "Africa/Khartoum",
    weekDayFormat: "short",
    date: "1477-01-13",
    locale: "ar-SD",
    calendar: "islamic-civil",
    clearable: true,
    onDateSelect: () => {}
  }));
};
exports.IslamicWithArabic = IslamicWithArabic;
const CalendarWithClearButton = _ref2 => {
  let {
    calendar = 'gregory',
    date: initialDate = null
  } = _ref2;
  const [date, setDate] = (0, _react.useState)(initialDate);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_calendarInput.CalendarInput, {
    calendar: calendar,
    date: date,
    onDateSelect: date => {
      setDate(date === null || date === void 0 ? void 0 : date.calendarDateString);
    },
    clearable: true
  }), /*#__PURE__*/_react.default.createElement("div", null, "value:", /*#__PURE__*/_react.default.createElement("span", {
    "data-test": "storybook-calendar-date-value"
  }, date !== null && date !== void 0 ? date : 'undefined')));
};
exports.CalendarWithClearButton = CalendarWithClearButton;
function CalendarWithStrictValidation() {
  const [validation, setValidation] = (0, _react.useState)({});
  const errored = () => {
    if (validation.error) {
      return {
        calendar: validation.validationText
      };
    }
  };
  return /*#__PURE__*/_react.default.createElement(_reactFinalForm.Form, {
    onSubmit: (values, meta) => {
      console.log('SUBMITTING', {
        values,
        meta
      });
    },
    initialValues: {
      calendar: '2022-10-12'
    },
    validate: errored
  }, _ref3 => {
    let {
      handleSubmit,
      invalid
    } = _ref3;
    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: handleSubmit
    }, /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
      name: "calendar"
    }, props => /*#__PURE__*/_react.default.createElement(_calendarInput.CalendarInput, _extends({}, props, {
      label: "Enter a date",
      helpText: "Date has to be after 2022-11-01",
      input: props.input,
      meta: props.meta,
      editable: true,
      date: props.input.value,
      calendar: "gregory"
    }, validation, {
      minDate: "2022-11-01",
      onDateSelect: date => {
        const validation = {
          ...date.validation,
          validationText: date.validation.validationCode === 'WRONG_FORMAT' ? 'custom validation message for format' : date.validation.validationText
        };
        setValidation(validation);
        props.input.onChange(date ? date === null || date === void 0 ? void 0 : date.calendarDateString : '');
      }
    }))), /*#__PURE__*/_react.default.createElement(_button.Button, {
      type: "submit",
      disabled: invalid,
      onClick: handleSubmit
    }, "Submit"));
  });
}
function CalendarWithNonStrictValidation() {
  const [validation, setValidation] = (0, _react.useState)({});
  const errored = () => {
    if (validation.error) {
      return {
        calendar: validation.validationText
      };
    }
  };
  return /*#__PURE__*/_react.default.createElement(_reactFinalForm.Form, {
    onSubmit: (values, meta) => {
      console.log('SUBMITTING', {
        values,
        meta
      });
    },
    initialValues: {
      calendar: '2022-10-12'
    },
    validate: errored
  }, _ref4 => {
    let {
      handleSubmit,
      invalid
    } = _ref4;
    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: handleSubmit
    }, /*#__PURE__*/_react.default.createElement(_reactFinalForm.Field, {
      name: "calendar"
    }, props => /*#__PURE__*/_react.default.createElement(_calendarInput.CalendarInput, _extends({}, props, {
      label: "Enter a date",
      helpText: "Date has to be after 2022-11-01",
      input: props.input,
      meta: props.meta,
      editable: true,
      date: props.input.value,
      calendar: "gregory"
    }, validation, {
      minDate: "2022-11-01",
      strictValidation: false,
      onDateSelect: date => {
        const validation = {
          ...date.validation,
          validationText: date.validation.validationCode === 'WRONG_FORMAT' ? 'custom validation message for format' : date.validation.validationText
        };
        setValidation(validation);
        props.input.onChange(date ? date === null || date === void 0 ? void 0 : date.calendarDateString : '');
      }
    }))), /*#__PURE__*/_react.default.createElement(_button.Button, {
      type: "submit",
      disabled: invalid,
      onClick: handleSubmit
    }, "Submit"));
  });
}