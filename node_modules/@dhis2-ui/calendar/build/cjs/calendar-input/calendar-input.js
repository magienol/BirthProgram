"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarInput = void 0;
var _style = _interopRequireDefault(require("styled-jsx/style"));
var _multiCalendarDates = require("@dhis2/multi-calendar-dates");
var _button = require("@dhis2-ui/button");
var _card = require("@dhis2-ui/card");
var _input = require("@dhis2-ui/input");
var _layer = require("@dhis2-ui/layer");
var _popper = require("@dhis2-ui/popper");
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _calendarContainer = require("../calendar/calendar-container.js");
var _index = _interopRequireDefault(require("../locales/index.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const offsetModifier = {
  name: 'offset',
  options: {
    offset: [0, 2]
  }
};
const CalendarInput = function () {
  let {
    onDateSelect: parentOnDateSelect,
    calendar,
    date,
    dir,
    locale,
    numberingSystem,
    weekDayFormat = 'narrow',
    width = '300px',
    cellSize = '32px',
    clearable,
    minDate,
    maxDate,
    format,
    strictValidation,
    inputWidth,
    dataTest = 'dhis2-uiwidgets-calendar-inputfield',
    pastOnly,
    ...rest
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const ref = (0, _react.useRef)();
  const calendarRef = (0, _react.useRef)();
  const [open, setOpen] = (0, _react.useState)(false);
  const [partialDate, setPartialDate] = (0, _react.useState)(date);
  (0, _react.useEffect)(() => setPartialDate(date), [date]);
  const useDatePickerOptions = (0, _react.useMemo)(() => ({
    calendar,
    locale,
    numberingSystem,
    weekDayFormat,
    pastOnly
  }), [calendar, locale, numberingSystem, weekDayFormat, pastOnly]);
  const onChooseDate = (date, validationOptions) => {
    if (!date) {
      parentOnDateSelect === null || parentOnDateSelect === void 0 ? void 0 : parentOnDateSelect({
        calendarDateString: null,
        validation: {
          valid: true
        }
      });
      return;
    }
    const validation = (0, _multiCalendarDates.validateDateString)(date, validationOptions);
    parentOnDateSelect === null || parentOnDateSelect === void 0 ? void 0 : parentOnDateSelect({
      calendarDateString: date,
      validation
    });
  };
  const validationOptions = (0, _react.useMemo)(() => ({
    calendar,
    format,
    minDateString: minDate,
    maxDateString: maxDate,
    strictValidation
  }), [calendar, format, maxDate, minDate, strictValidation]);
  const pickerResults = (0, _multiCalendarDates.useDatePicker)({
    onDateSelect: result => {
      onChooseDate(result.calendarDateString, validationOptions);
      setOpen(false);
    },
    date,
    ...validationOptions,
    options: useDatePickerOptions
  });
  const handleChange = e => {
    setOpen(false);
    setPartialDate(e.value);
  };
  const handleBlur = (_, e) => {
    var _calendarRef$current;
    if (e.relatedTarget && (_calendarRef$current = calendarRef.current) !== null && _calendarRef$current !== void 0 && _calendarRef$current.contains(e.relatedTarget)) {
      return;
    }
    onChooseDate(partialDate, validationOptions);
    setOpen(false);
  };
  const onFocus = () => {
    var _rest$onFocus;
    setOpen(true);
    rest === null || rest === void 0 ? void 0 : (_rest$onFocus = rest.onFocus) === null || _rest$onFocus === void 0 ? void 0 : _rest$onFocus.call(rest);
  };
  const languageDirection = (0, _multiCalendarDates.useResolvedDirection)(dir, locale);
  const calendarProps = (0, _react.useMemo)(() => ({
    date,
    width,
    cellSize,
    isValid: pickerResults.isValid,
    calendarWeekDays: pickerResults.calendarWeekDays,
    weekDayLabels: pickerResults.weekDayLabels,
    currMonth: pickerResults.currMonth,
    currYear: pickerResults.currYear,
    nextMonth: pickerResults.nextMonth,
    nextYear: pickerResults.nextYear,
    prevMonth: pickerResults.prevMonth,
    prevYear: pickerResults.prevYear,
    navigateToYear: pickerResults.navigateToYear,
    navigateToMonth: pickerResults.navigateToMonth,
    months: pickerResults.months,
    years: pickerResults.years,
    languageDirection
  }), [cellSize, date, pickerResults, width, languageDirection]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    ref: ref,
    className: _style.default.dynamic([["423137534", [inputWidth, rest.error || rest.warning ? '36px' : '6px']]]) + " " + "calendar-input-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_input.InputField, _extends({
    label: _index.default.t('Pick a date')
  }, rest, {
    dataTest: dataTest,
    type: "text",
    onFocus: onFocus,
    value: partialDate,
    onChange: handleChange,
    onBlur: handleBlur,
    inputWidth: inputWidth
  })), clearable && /*#__PURE__*/_react.default.createElement("div", {
    className: _style.default.dynamic([["423137534", [inputWidth, rest.error || rest.warning ? '36px' : '6px']]]) + " " + ((0, _classnames.default)('calendar-clear-button', {
      'with-icon': rest.valid || rest.error || rest.warning || rest.loading,
      'with-dense-wrapper': rest.dense
    }) || "")
  }, /*#__PURE__*/_react.default.createElement(_button.Button, {
    dataTest: "calendar-clear-button",
    secondary: true,
    small: true,
    onClick: () => onChooseDate(null),
    type: "button"
  }, _index.default.t('Clear')))), open && /*#__PURE__*/_react.default.createElement(_layer.Layer, {
    onBackdropClick: () => setOpen(false)
  }, /*#__PURE__*/_react.default.createElement(_popper.Popper, {
    reference: ref,
    placement: "bottom-start",
    modifiers: [offsetModifier]
  }, /*#__PURE__*/_react.default.createElement(_card.Card, null, /*#__PURE__*/_react.default.createElement(_calendarContainer.CalendarContainer, _extends({}, calendarProps, {
    calendarRef: calendarRef
  }))))), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "423137534",
    dynamic: [inputWidth, rest.error || rest.warning ? '36px' : '6px']
  }, [`.calendar-input-wrapper.__jsx-style-dynamic-selector{position:relative;width:${inputWidth};}`, `.calendar-clear-button.__jsx-style-dynamic-selector{position:absolute;inset-inline-end:${rest.error || rest.warning ? '36px' : '6px'};-webkit-inset-block-start:27px;-ms-intb-rlock-start:27px;inset-block-start:27px;}`, ".calendar-clear-button.with-icon.__jsx-style-dynamic-selector{inset-inline-end:36px;}", ".calendar-clear-button.with-dense-wrapper.__jsx-style-dynamic-selector{-webkit-inset-block-start:23px;-ms-intb-rlock-start:23px;inset-block-start:23px;}"]));
};
exports.CalendarInput = CalendarInput;
CalendarInput.propTypes = {
  /** the calendar to use such gregory, ethiopic, nepali - full supported list here: https://github.com/dhis2/multi-calendar-dates/blob/main/src/constants/calendars.ts  */
  calendar: _propTypes.default.any.isRequired,
  /** Called with signature `(null)` \|\| `({ dateCalendarString: string, validation: { error: boolean, warning: boolean, validationText: string} })` with `dateCalendarString` being the stringified date in the specified calendar in the format `yyyy-MM-dd` */
  onDateSelect: _propTypes.default.func.isRequired,
  /** the size of a single cell in the table forming the calendar */
  cellSize: _propTypes.default.string,
  /** Whether the clear button is displayed */
  clearable: _propTypes.default.bool,
  /** 'data-test' attribute of `InputField` component */
  dataTest: _propTypes.default.string,
  /** the currently selected date using an iso-like format YYYY-MM-DD, in the calendar system provided (not iso8601) */
  date: _propTypes.default.string,
  /** the direction of the library - internally the library will use rtl for rtl-languages but this can be overridden here for more control */
  dir: _propTypes.default.oneOf(['ltr', 'rtl']),
  /** The date format to use either `YYYY-MM-DD` or `DD-MM-YYYY` */
  format: _propTypes.default.oneOf(['YYYY-MM-DD', 'DD-MM-YYYY']),
  /** the width of input field */
  inputWidth: _propTypes.default.string,
  /** any valid locale -  if none provided, the internal library will fallback to the user locale (more info here: https://github.com/dhis2/multi-calendar-dates/blob/main/src/hooks/internal/useResolvedLocaleOptions.ts#L15) */
  locale: _propTypes.default.string,
  /** The maximum selectable date */
  maxDate: _propTypes.default.string,
  /** The minimum selectable date */
  minDate: _propTypes.default.string,
  /** numbering system to use - full list here https://github.com/dhis2/multi-calendar-dates/blob/main/src/constants/numberingSystems.ts */
  numberingSystem: _propTypes.default.string,
  /** When true, only shows years in the past (current year and earlier) */
  pastOnly: _propTypes.default.bool,
  /** Whether to use strict validation by showing errors for out-of-range dates when enabled (default), and warnings when disabled */
  strictValidation: _propTypes.default.bool,
  /** the format to display for the week day, i.e. Monday (long), Mon (short), M (narrow) */
  weekDayFormat: _propTypes.default.oneOf(['narrow', 'short', 'long']),
  /** the width of the calendar component */
  width: _propTypes.default.string
};