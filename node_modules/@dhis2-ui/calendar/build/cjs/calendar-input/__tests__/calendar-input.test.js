"use strict";

var _button = require("@dhis2-ui/button");
var _react = require("@testing-library/react");
var _userEvent = require("@testing-library/user-event");
var _react2 = _interopRequireWildcard(require("react"));
var _reactFinalForm = require("react-final-form");
var _calendarInput = require("../calendar-input.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
describe('Calendar Input', () => {
  beforeEach(() => {
    jest.useFakeTimers();
    jest.setSystemTime(new Date('2024-10-22T09:05:00.000Z'));
  });
  afterEach(jest.useRealTimers);
  it('allow selection of a date through the calendar widget', async () => {
    const onDateSelectMock = jest.fn();
    const screen = (0, _react.render)(/*#__PURE__*/_react2.default.createElement(_calendarInput.CalendarInput, {
      calendar: "gregory",
      onDateSelect: onDateSelectMock
    }));
    const dateInput = (0, _react.within)(screen.getByTestId('dhis2-uicore-input')).getByRole('textbox');
    _react.fireEvent.focus(dateInput);
    const calendar = await screen.findByTestId('calendar');
    expect(calendar).toBeInTheDocument();
    const todayString = '2024-10-22';
    const today = (0, _react.within)(calendar).getByTestId(todayString);
    _react.fireEvent.click(today);
    await (0, _react.waitFor)(() => {
      expect(calendar).not.toBeInTheDocument();
    });
    expect(onDateSelectMock).toHaveBeenCalledWith(expect.objectContaining({
      calendarDateString: todayString
    }));
  });
  it('allow selection of a date through the input', async () => {
    const onDateSelectMock = jest.fn();
    const screen = (0, _react.render)(/*#__PURE__*/_react2.default.createElement(_calendarInput.CalendarInput, {
      calendar: "gregory",
      onDateSelect: onDateSelectMock
    }));
    const dateInputString = '2024/10/12';
    const dateInput = (0, _react.within)(screen.getByTestId('dhis2-uicore-input')).getByRole('textbox');
    _react.fireEvent.change(dateInput, {
      target: {
        value: dateInputString
      }
    });
    _react.fireEvent.blur(dateInput);
    expect(onDateSelectMock).toHaveBeenCalledWith(expect.objectContaining({
      calendarDateString: dateInputString
    }));
  });
  describe('validation', () => {
    beforeEach(jest.useRealTimers);
    it('should validate minimum date', async () => {
      const onDateSelectMock = jest.fn();
      const screen = (0, _react.render)(/*#__PURE__*/_react2.default.createElement(CalendarWithValidation, {
        calendar: "gregory",
        minDate: "2024-01-01",
        onDateSelect: onDateSelectMock
      }));
      const dateInputString = '2023-10-12';
      const dateInput = (0, _react.within)(screen.getByTestId('dhis2-uicore-input')).getByRole('textbox');
      await _userEvent.userEvent.clear(dateInput);
      await _userEvent.userEvent.type(dateInput, dateInputString);
      await _userEvent.userEvent.tab();
      expect(await screen.findByText('Date 2023-10-12 is less than the minimum allowed date 2024-01-01.'));
      expect(onDateSelectMock).toHaveBeenCalledTimes(1);
    });
    it('should validate maximum date', async () => {
      const {
        getByTestId,
        findByText
      } = (0, _react.render)(/*#__PURE__*/_react2.default.createElement(CalendarWithValidation, {
        calendar: "gregory",
        maxDate: "2024-01-01"
      }));
      const dateInputString = '2024-10-12';
      const dateInput = (0, _react.within)(getByTestId('dhis2-uicore-input')).getByRole('textbox');
      await _userEvent.userEvent.clear(dateInput);
      await _userEvent.userEvent.type(dateInput, dateInputString);
      await _userEvent.userEvent.tab();
      expect(await findByText('Date 2024-10-12 is greater than the maximum allowed date 2024-01-01.'));
    });
    it('should validate date in ethiopic calendar', async () => {
      const onDateSelectMock = jest.fn();
      const {
        getByTestId,
        findByText,
        queryByText
      } = (0, _react.render)(/*#__PURE__*/_react2.default.createElement(CalendarWithValidation, {
        calendar: "ethiopian",
        minDate: "2018-13-04",
        onDateSelect: onDateSelectMock
      }));
      let dateInputString = '2018-13-02';
      const dateInput = (0, _react.within)(getByTestId('dhis2-uicore-input')).getByRole('textbox');
      await _userEvent.userEvent.clear(dateInput);
      await _userEvent.userEvent.type(dateInput, dateInputString);
      await _userEvent.userEvent.tab();
      await findByText('Date 2018-13-02 is less than the minimum allowed date 2018-13-04.');
      dateInputString = '2018-13-05';
      await _userEvent.userEvent.clear(dateInput);
      await _userEvent.userEvent.click(dateInput);
      await _userEvent.userEvent.type(dateInput, dateInputString);
      await _userEvent.userEvent.tab();
      expect(queryByText('Date 2018-13-04 is less than the minimum allowed date 2018-13-05.')).not.toBeInTheDocument();
      dateInputString = '2018-13-07';
      await _userEvent.userEvent.clear(dateInput);
      await _userEvent.userEvent.type(dateInput, dateInputString);
      await _userEvent.userEvent.tab();
      expect(await findByText('Invalid date in specified calendar')).toBeInTheDocument();
    }, 20 * 1000);
    // ToDo: these scenarios seem to work but they timeout on CI sporadically - ticket: https://dhis2.atlassian.net/browse/LIBS-763
    it.skip('should validate date in nepali calendar', async () => {
      const onDateSelectMock = jest.fn();
      const {
        getByTestId,
        findByText,
        queryByText
      } = (0, _react.render)(/*#__PURE__*/_react2.default.createElement(CalendarWithValidation, {
        calendar: "nepali",
        maxDate: "2080-05-30",
        onDateSelect: onDateSelectMock
      }));
      let dateInputString = '2080-06-01';
      const dateInput = (0, _react.within)(getByTestId('dhis2-uicore-input')).getByRole('textbox');
      await _userEvent.userEvent.clear(dateInput);
      await _userEvent.userEvent.type(dateInput, dateInputString);
      await _userEvent.userEvent.tab();
      expect(await findByText('Date 2080-06-01 is greater than the maximum allowed date 2080-05-30.'));
      dateInputString = '2080-04-32';
      await _userEvent.userEvent.clear(dateInput);
      await _userEvent.userEvent.type(dateInput, dateInputString);
      await _userEvent.userEvent.tab();
      expect(queryByText(/greater than the maximum allowed date/)).not.toBeInTheDocument();
      dateInputString = '2080-01-32';
      await _userEvent.userEvent.clear(dateInput);
      await _userEvent.userEvent.type(dateInput, dateInputString);
      await _userEvent.userEvent.tab();
      expect(await findByText('Invalid date in specified calendar')).toBeInTheDocument();
    }, 20 * 1000);
    it.skip('should validate from date picker', async () => {
      jest.useFakeTimers('modern');
      jest.setSystemTime(new Date('2024-10-22T09:05:00.000Z'));
      const onDateSelectMock = jest.fn();
      const {
        queryByText,
        getByText,
        getByTestId
      } = (0, _react.render)(/*#__PURE__*/_react2.default.createElement(CalendarWithValidation, {
        calendar: "gregory",
        minDate: "2024-02-16",
        onDateSelect: onDateSelectMock
      }));
      const dateInput = (0, _react.within)(getByTestId('dhis2-uicore-input')).getByRole('textbox');
      await _react.fireEvent.focusIn(dateInput);
      await _react.fireEvent.click(getByText('17'));
      expect(queryByText('17')).not.toBeInTheDocument();

      // Checking fix for Bug where callback used to be called twice - first with undefined
      expect(onDateSelectMock).toHaveBeenCalledTimes(1);
      expect(onDateSelectMock).toHaveBeenCalledWith({
        calendarDateString: '2024-10-17',
        validation: {
          error: false,
          valid: true,
          warning: false
        }
      });
    });
    it('should validate with Clear', async () => {
      const onDateSelectMock = jest.fn();
      const {
        queryByText,
        getByText,
        getByTestId
      } = (0, _react.render)(/*#__PURE__*/_react2.default.createElement(CalendarWithValidation, {
        calendar: "gregory",
        minDate: "2024-02-16",
        onDateSelect: onDateSelectMock,
        clearable: true
      }));
      const dateInputString = '2023-10-12';
      const dateInput = (0, _react.within)(getByTestId('dhis2-uicore-input')).getByRole('textbox');
      await _userEvent.userEvent.clear(dateInput);
      await _userEvent.userEvent.type(dateInput, dateInputString);
      await _userEvent.userEvent.tab();
      expect(getByTestId('dhis2-uiwidgets-calendar-inputfield-validation')).toBeInTheDocument();
      await _userEvent.userEvent.click(getByText('Clear'));
      expect(queryByText('17')).not.toBeInTheDocument();
      expect(onDateSelectMock).toHaveBeenLastCalledWith({
        calendarDateString: null,
        validation: {
          valid: true
        }
      });
    });
    it('should validate when Clearing manually (i.e. deleting text not using clear button)', async () => {
      const onDateSelectMock = jest.fn();
      const {
        getByTestId
      } = (0, _react.render)(/*#__PURE__*/_react2.default.createElement(CalendarWithValidation, {
        calendar: "gregory",
        minDate: "2024-02-16",
        onDateSelect: onDateSelectMock,
        clearable: true
      }));
      const dateInputString = '2023-10-12';
      const dateInput = (0, _react.within)(getByTestId('dhis2-uicore-input')).getByRole('textbox');
      await _userEvent.userEvent.clear(dateInput);
      await _userEvent.userEvent.type(dateInput, dateInputString);
      await _userEvent.userEvent.tab();
      expect(getByTestId('dhis2-uiwidgets-calendar-inputfield-validation')).toBeInTheDocument();
      await _userEvent.userEvent.clear(dateInput);
      await _userEvent.userEvent.tab();
      expect(onDateSelectMock).toHaveBeenCalledWith({
        calendarDateString: null,
        validation: {
          valid: true
        }
      });
    });
  });
});
const CalendarWithValidation = propsFromParent => {
  const [date, setDate] = (0, _react2.useState)();
  const [validation, setValidation] = (0, _react2.useState)({});
  const errored = () => {
    if (validation !== null && validation !== void 0 && validation.error) {
      return {
        calendar: validation.validationText
      };
    }
  };
  return /*#__PURE__*/_react2.default.createElement(_reactFinalForm.Form, {
    onSubmit: () => {},
    validate: errored
  }, _ref => {
    let {
      handleSubmit,
      invalid
    } = _ref;
    return /*#__PURE__*/_react2.default.createElement("form", null, /*#__PURE__*/_react2.default.createElement(_reactFinalForm.Field, {
      name: "calendar"
    }, props => /*#__PURE__*/_react2.default.createElement(_calendarInput.CalendarInput, _extends({}, props, {
      date: date,
      label: "Enter a date",
      editable: true,
      calendar: "gregory"
    }, validation, propsFromParent, {
      onDateSelect: date => {
        var _propsFromParent$onDa;
        setDate(date === null || date === void 0 ? void 0 : date.calendarDateString);
        setValidation(date === null || date === void 0 ? void 0 : date.validation);
        (_propsFromParent$onDa = propsFromParent.onDateSelect) === null || _propsFromParent$onDa === void 0 ? void 0 : _propsFromParent$onDa.call(propsFromParent, date);
      }
    }))), /*#__PURE__*/_react2.default.createElement(_button.Button, {
      type: "submit",
      disabled: invalid,
      onClick: handleSubmit
    }, "Submit"));
  });
};